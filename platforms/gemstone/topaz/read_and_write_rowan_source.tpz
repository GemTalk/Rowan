#!//usr/local/bin/smalltalk/gemstone/topaz
#
#	read project source from rowan/source and then write project source for loaded projects in a 3.5.0 image
#
# If you are using GsDevKit_home[1] and have stash[2] installed, this topaz 
#	script can be directly executed:
#
#		$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.5.0/read_and_write_project_source_350.tpz <gsdevkit-stone-name> -lq
#
# If you are not using GsDevKit_home, you can directly run this script as long as
# 	1. $GEMSTONE is defined
# 	2. $GEMSTONE/bin is you path
#	then execute using the following invocation
#
#		$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.5.0/install_1.tpz -lq
#
#	[1] https://github.com/GsDevKit/GsDevKit_home
# [2] https://github.com/dalehenrich/stash
#

 omit pushonly
  iferr 1 stk
  iferr 2 stack
#  iferr 3 exit 1
	display oops

  set user SystemUser p swordfish
	set solologin on
  login

run
	| platformConditionalAttributes platformConditionalAttributes3215 projectSetModification visitor 
		topazFileNameMap repositoryRoot packageCreateTool projectLoadTool platformConditionalAttributes360
	 auditFailures gsFileName repositoryRoot3215 repositoryRoot360 
   platformConditionalAttributes370 repositoryRoot370 |

false ifTrue: [ 
	Rowan projectTools trace startTracing 
].
  GsFile gciLogServer: '--- read and write project source RowanV2'.
	platformConditionalAttributes370 := {
		'common'.
		'gemstone'.
		'gemstone-kernel'.
		'3.7.0' asRwGemStoneVersionNumber.	"want to read 3.7.0 packages"
	}.
	platformConditionalAttributes360 := {
		'common'.
		'gemstone'.
		'gemstone-kernel'.
		'3.6.1' asRwGemStoneVersionNumber.	"want to read 3.6.1 packages"
	}.
	platformConditionalAttributes := {
		'common'.
		'gemstone'.
		'gemstone-kernel'.
		'3.5.0' asRwGemStoneVersionNumber.	"want to read 3.5.0 packages"
	}.
	platformConditionalAttributes3215 := {
		'common'.
		'gemstone'.
		'gemstone-kernel'.
		'3.2.15' asRwGemStoneVersionNumber.	"want to read 3.2.15 packages"
	}.
	repositoryRoot370 := '$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.7.0/project_src_v2' asFileReference.
	repositoryRoot370 ensureCreateDirectory.
false ifTrue: [ 
	repositoryRoot370 deleteAllChildren.
 ].
	repositoryRoot360 := '$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.6.0/project_src_v2' asFileReference.
	repositoryRoot360 ensureCreateDirectory.
false ifTrue: [ 
	repositoryRoot360 deleteAllChildren.
 ].
	repositoryRoot3215 := '$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.2.15/project_src_v2' asFileReference.
	repositoryRoot3215 ensureCreateDirectory.
false ifTrue: [ 
	repositoryRoot3215 deleteAllChildren.
 ].
	repositoryRoot := '$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.5.0/project_src_v2' asFileReference.
	repositoryRoot ensureCreateDirectory.
false ifTrue: [ 
	repositoryRoot deleteAllChildren.
].
	{
		{
			'file:$ROWAN_PROJECTS_HOME/Rowan/rowan/specs/Rowan.ston'.
			'$ROWAN_PROJECTS_HOME'.
			platformConditionalAttributes.
			repositoryRoot.
			'RowanV2'.
			(Dictionary new).
      false.
		}.		{
			'file:$ROWAN_PROJECTS_HOME/Rowan/rowan/specs/Rowan.ston'.
			'$ROWAN_PROJECTS_HOME'.
			platformConditionalAttributes370.
			repositoryRoot370.
			'RowanV2'.
			(Dictionary new 
				at: 'Rowan' 
					put: 
						{
							('stubs' -> {'Rowan-GemStone-Kernel-Stubs-36x' }) .
							('tonel' -> 
								{ 
									'Rowan-Tonel-Core' .
									'Rowan-Tonel-GemStone-Kernel-32x' .
									'Rowan-Tonel-GemStone-Kernel-32-5' .
									'Rowan-Tonel-GemStone-Kernel' .
								}) .
						}; 
				at: 'STON' 
					put: 
						{
							('tonel' -> 
								{ 
									'STON-Core' .
									'STON-GemStone-Kernel'.
									'STON-GemStoneBase' .
									'STON-GemStoneCommon' .
									'STON-GemStone-Kernel36x' .
								}) .
						}; 
				yourself).
			true.
		}.		{
			'file:$ROWAN_PROJECTS_HOME/Rowan/rowan/specs/Rowan.ston'.
			'$ROWAN_PROJECTS_HOME'.
			platformConditionalAttributes360.
			repositoryRoot360.
			'RowanV2'.
			(Dictionary new 
				at: 'Rowan' 
					put: 
						{
							('stubs' -> {'Rowan-GemStone-Kernel-Stubs-36x' }) .
							('tonel' -> 
								{ 
									'Rowan-Tonel-Core' .
									'Rowan-Tonel-GemStone-Kernel-32x' .
									'Rowan-Tonel-GemStone-Kernel-32-5' .
									'Rowan-Tonel-GemStone-Kernel' .
								}) .
						}; 
				at: 'STON' 
					put: 
						{
							('tonel' -> 
								{ 
									'STON-Core' .
									'STON-GemStone-Kernel'.
									'STON-GemStoneBase' .
									'STON-GemStoneCommon' .
									'STON-GemStone-Kernel36x' .
								}) .
						}; 
				yourself).
			true.
		}.		{
			'file:$ROWAN_PROJECTS_HOME/Rowan/rowan/specs/Rowan.ston'.
			'$ROWAN_PROJECTS_HOME'.
			platformConditionalAttributes3215.
			repositoryRoot3215.
			'RowanV2'.
			(Dictionary new).
			false.
		}.
	} 
	do: [:ar |
		"Read project and packages from disk."
		| configNames groupNames resolvedProject theProjectSetDefinition loadSpecUrl loadSpec projectsHome conditionalAttributes theRepositoryRoot specialCaseDict excludedPackages logCreation |
		loadSpecUrl := ar at: 1.
		projectsHome := ar at: 2.
		conditionalAttributes := (ar at: 3) copy.
		theRepositoryRoot := ar at: 4.
		gsFileName := ar at: 5.
		specialCaseDict := ar at: 6.
		logCreation := ar at: 7.
		loadSpec := RwSpecification fromUrl: loadSpecUrl.
		conditionalAttributes addAll: loadSpec customConditionalAttributes.
		resolvedProject := loadSpec
			projectsHome: projectsHome;
			resolve.
		theProjectSetDefinition :=  resolvedProject readProjectSet: conditionalAttributes.
		theProjectSetDefinition
			do: [:projectDefinition |	
				GsFile gciLogServer: '	Project: ', projectDefinition name.
				projectDefinition packageNames sort do: [:pkgName | GsFile gciLogServer: '		', pkgName ] ].

		topazFileNameMap := Dictionary new.
		topazFileNameMap at: gsFileName put: {}.
		excludedPackages := Set new.
		theProjectSetDefinition keys do: [:projectName |
			| projectDefinition thePackages |
			"compute excludedPackages for all projects"
			projectDefinition := theProjectSetDefinition projectNamed: projectName.
			specialCaseDict 
				at: projectName
				ifPresent: [:assocList |
					assocList do: [:assoc | 
						excludedPackages addAll: assoc value.
						(topazFileNameMap at: gsFileName, '_', assoc key ifAbsentPut: [ Set new ])
							addAll: assoc value.
						GsFile gciLogServer: '	---', assoc key, ' packages ', assoc value printString ] ] ].
		GsFile gciLogServer: '	Excluded packages: ', excludedPackages asArray printString.
		theProjectSetDefinition keys do: [:projectName |
			| projectDefinition thePackages |
			"define contents of RowanV2.gs"
			projectDefinition := theProjectSetDefinition projectNamed: projectName.
			thePackages := projectDefinition packageNames.
			thePackages removeAllPresent: excludedPackages.
			thePackages do: [:packageName |
				(topazFileNameMap at: gsFileName) add: packageName ] ].
		GsFile gciLogServer: 'LoadSpec: ', gsFileName, '.gs (', (conditionalAttributes at: 4) printString, ')'.

		projectSetModification := theProjectSetDefinition compareAgainstBase: RwProjectSetDefinition new.
		visitor := RwGsModificationTopazWriterVisitorV2 new
			logCreation: logCreation;
			repositoryRootPath: theRepositoryRoot;
			topazFilenamePackageNamesMap: topazFileNameMap;
			yourself.
		visitor visit: projectSetModification ].
%
