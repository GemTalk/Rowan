#!//usr/local/bin/smalltalk/gemstone/topaz
#
#	read project source from rowan/source and then write project source for loaded projects in a 3.5.0 image
#
# If you are using GsDevKit_home[1] and have stash[2] installed, this topaz 
#	script can be directly executed:
#
#		$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.5.0/read_and_write_project_source_350.tpz <gsdevkit-stone-name> -lq
#
# If you are not using GsDevKit_home, you can directly run this script as long as
# 	1. $GEMSTONE is defined
# 	2. $GEMSTONE/bin is you path
#	then execute using the following invocation
#
#		$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.5.0/install_1.tpz -lq
#
#	[1] https://github.com/GsDevKit/GsDevKit_home
# [2] https://github.com/dalehenrich/stash
#

 omit pushonly
  iferr 1 stk
  iferr 2 stack
#  iferr 3 exit 1
	display oops

  set user SystemUser p swordfish
  login

run
	| platformConditionalAttributesDiskConfigs repositoryRoot |

	platformConditionalAttributesDiskConfigs := {
		'common'.
		'vast'
	}.
	repositoryRoot := '$ROWAN_PROJECTS_HOME/Rowan/platforms/vast/bootstrapPackage' asFileReference.
	repositoryRoot ensureCreateDirectory.
	repositoryRoot deleteAllChildren.
	{
		{
			'file:$ROWAN_PROJECTS_HOME/Rowan/rowan/v2/specs/DiskConfigurationsV2.ston'.
			'$ROWAN_PROJECTS_HOME'.
			platformConditionalAttributesDiskConfigs
		}.
	} 
	do: [:ar |
		"Read project and packages from disk."
		| configNames groupNames resolvedProject theProjectSetDefinition loadSpecUrl loadSpec projectsHome conditionalAttributes projectName projectDefinition projectAlias bootstrapPackage |
		loadSpecUrl := ar at: 1.
		projectsHome := ar at: 2.
		conditionalAttributes := ar at: 3.
		loadSpec := RwSpecification fromUrl: loadSpecUrl.
		resolvedProject := loadSpec
			projectsHome: projectsHome;
			resolve.
		theProjectSetDefinition :=  resolvedProject read: conditionalAttributes.
		GsFile gciLogServer: 'LoadSpec: ', loadSpec specName.

		"Now copy all of the definitions from the Rowan packages into a single bootstrap package for VAST"
		projectAlias := 'bootstrapPackage'.
		resolvedProject := RwResolvedProjectV2 new
			projectName: 'DiskConfigurationsV2';
			projectAlias: projectAlias;
			projectsHome: repositoryRoot;
			diskUrl: 'file://' , (repositoryRoot / projectAlias)  pathString;
			yourself.
			
		resolvedProject _projectSpecification packageConvention: 'Rowan'.

		resolvedProject resolve.

		bootstrapPackage := resolvedProject 
			addComponentNamed: 'DiskConfigurationsV2'
				definedGroupNames: 
					(Dictionary new
							add: 'core' -> {};
							yourself)
				comment: 'Project used for bootstrapping the DiskConfigurationsV2 definitions into VAST';
			addPackageNamed:  'DiskConfigurationsV2-VAST-Bootstrap'
				toComponentNamed: 'DiskConfigurationsV2'
				withConditions: {'common'}
				andGroupName: 'core'.
			
		projectDefinition := theProjectSetDefinition projectNamed: 'Rowan'.
		projectDefinition packages do: [:packageDefinition | 
			packageDefinition classDefinitions do: [:classDefinition |
				 bootstrapPackage addClassDefinition: classDefinition ].
			packageDefinition classExtensions do: [:classExtDefinition |
				 bootstrapPackage addClassExtensionDefinition: classExtDefinition ] ].

		resolvedProject
			export;
			exportLoadSpecification.
 ].
%
