output push $upgradeLogDir/upgradeImage.out only

set gemstone $stoneName user SystemUser pass swordfish
!
display resultcheck
level 0
!

iferr 1 where
iferr 2 stk
iferr 3 stack

!  display topaz settings
status
time

! comment out following for debugging
! iferror exit

# restore the Rowan Kernel modification methods
#		NOTE:
#			1. restored the kernel support methods, but additional extension methods for
#					base classes have not been installed
#			2. by using topaz to install methods, we have corrupted the Rowan loaded
#					things
#			3. we need rowan to be functional before we can restore things.
#
input $ROWAN_INSTALL_HOME/rowan/Rowan-Kernel-Support.gs
errorCount

  set u SystemUser p swordfish
  login

input $ROWAN_INSTALL_HOME/cypress/Cypress-GemStone-Environmental-Tools.gs
errorCount
commit
input $ROWAN_INSTALL_HOME/ston/STON-GemStone-Kernel.gs
errorCount
input $ROWAN_INSTALL_HOME/ston/STON-GemStoneBase-Core.gs
errorCount
input $ROWAN_INSTALL_HOME/ston/STON-GemStoneCommon-Core.gs
errorCount
commit
input $ROWAN_INSTALL_HOME/tonel/Tonel-GemStoneCommon-Core.gs
errorCount
commit

  run
  UserGlobals 
    at: #CypressBootstrapRowanBlock 
    put: [:symbolDictName :packageNames  |
    | packageManager repo |
    packageManager := CypressPackageManager3 new.
    repo := CypressAbstractRepository
      onUrl: (CypressUrl absoluteFromText: 'tonel:$ROWAN_PROJECTS_HOME/Rowan/rowan/src/'  )
      alias: ''.
    packageManager
      defaultSymbolDictionaryName: symbolDictName asSymbol.
    packageNames
      do: [ :packageName | 
        packageManager
          addResolvedReference:
            (CypressResolvedReference name: packageName repository: repo) ].
    packageManager loadResolvedReferences ].
	System commit
%

  run
  CypressBootstrapRowanBlock 
    value: 'Globals'
    value: #('GemStone-Interactions-Kernel' 'Rowan-GemStone-Kernel' 'Rowan-Cypress-Kernel' 
      'Rowan-Tools-Kernel' 
      'Rowan-GemStone-3215'
	).		"Extension methods for GemStone kernel classes"
	System commit.
%

  run
  UserGlobals removeKey: #CypressBootstrapRowanBlock.
	System commit
%

	run
"At this stage Rowan is functional - all of the loaded methods are correct, 
		however the loaded things must be rebuilt for Globals class extensions, since 
		loaded methods without using the Rowan API (because the API is non-functional
		after extension methods to Globals were removed during upgrade."
	| packagesInGlobals disownTool adoptTool adoptionMap stagingPackageName stagingProjectName
		stagingProjectDefinition projectNames stagingPackageDefinition projectSetDefinition |

"Collect a list of projects and package names that are loaded into Globals"
	packagesInGlobals := Dictionary new.
	adoptionMap := Dictionary new.
	(UserGlobals at: #RwGsLoadedProjectRegistry)
		do: [:loadedProject |
			| gsSpec |
			gsSpec := loadedProject handle platformSpec at: 'gemstone'.
			loadedProject packageNames do: [:packageName |
				(gsSpec symbolDictNameForPackageNamed: packageName) = 'Globals'
						ifTrue: [ 
							(packagesInGlobals at: loadedProject name ifAbsentPut: [ Array new ])
								add: packageName ] ] ].

"disown all of the Globals class extension methods and record the extension methods for use with staging project"
	disownTool := Rowan packageTools disown.
	packagesInGlobals keysAndValuesDo: [:projectName :packageNames |
		| loadedProject |
		loadedProject := Rowan image loadedProjectNamed: projectName.
		packageNames do: [:packageName |
			| loadedPackage |
			loadedPackage := loadedProject loadedPackages at: packageName.
			loadedPackage classExtensionDefinitions keysAndValuesDo: [:className :classExtensionDef |
				| classMap |
				disownTool 
					disownClassExtensionMethodsInClassNamed: className 
					forPackageNamed: packageName.
				classMap := adoptionMap at: className ifAbsentPut: [ Dictionary new ].
				(classMap at: 'class' ifAbsentPut: [ Array new ])
					addAll: classExtensionDef classMethodDefinitions keys.
				(classMap at: 'instance' ifAbsentPut: [ Array new ])
					addAll: classExtensionDef instanceMethodDefinitions keys ] ] ].

"Create the staging project and package. All Globals class extension methods will be adopted into the staging package"
	stagingProjectName := 'Staging-Upgrade-Project'.
	stagingPackageName := 'Staging-Upgrade-Globals'.
	stagingProjectDefinition := Rowan projectTools create
		createDiskBasedProjectDefinition: stagingProjectName 
		packageNames: {stagingPackageName} 
		format: 'tonel'
		root: '$ROWAN_PROJECTS_HOME'.
	stagingProjectDefinition defaultSymbolDictName: 'Globals'.
	Rowan projectTools load loadProjectDefinition: stagingProjectDefinition.

"adopt existing Globals class extension methods into the staging project"
	adoptTool := Rowan packageTools adopt.
	adoptionMap keysAndValuesDo: [:className :selectorsDict |
			| instanceSelectors classSelectors selectors |
			"only adopt selectors for which a method exists in the class -- during upgrade we only reload some of the extensions methods
				-- those will be reloaded at end when we load all projects from disk. "
			selectors := (Rowan globalNamed: className) selectors.
			instanceSelectors := (selectorsDict at: 'instance') select: [:selector | selectors includes: selector ].
			selectors := (Rowan globalNamed: className) class selectors.
			classSelectors := (selectorsDict at: 'class') select: [:selector | selectors includes: selector ].
			adoptTool
				adoptClassExtensionNamed: className 
				 instanceSelectors: instanceSelectors 
				classSelectors:  classSelectors  
				intoPackageNamed: stagingPackageName ].

"read all projects that have packages in Globals with extension methods from disk"
	projectNames := packagesInGlobals keys.
	projectSetDefinition := RwProjectSetDefinition new.
	projectNames do: [:projectName |
		| psd |
		psd:= Rowan projectTools read readProjectSetForProjectNamed: projectName.
		projectSetDefinition addProject: (psd projectNamed: projectName ifAbsent: []) ].

"remove the class extensions from the staging project package"
	stagingProjectDefinition := (Rowan image loadedProjectNamed: stagingProjectName) asDefinition.
	stagingPackageDefinition := stagingProjectDefinition packageNamed: stagingPackageName.
	stagingPackageDefinition classExtensions: Dictionary new.
	projectSetDefinition addProject: stagingProjectDefinition.

"load the projects and mark not dirty"
	Rowan projectTools load loadProjectSetDefinition: projectSetDefinition. 
	Rowan projectTools load markProjectSetNotDirty: projectSetDefinition.

"Now delete the (empty) staging project"
	Rowan projectTools delete deleteProjectNamed: stagingProjectName.
	System commit.
%

# should be no duplicate methods in Globals method registry
	expectvalue 0 
	run
	"validate that there are no duplicate methods in the methodRegistry --- we've done the upgrade correctly"
	| dict dupes |
	dict := Dictionary new.
	Globals rowanSymbolDictionaryRegistry methodRegistry keys
		do: [:meth |
			((dict at: meth inClass name ifAbsentPut: [Dictionary new])
				at: meth selector ifAbsentPut: [IdentitySet new])
					add: meth].
	dupes := {}.
	dict keysAndValuesDo: [:className :methDict |
		methDict keysAndValuesDo: [:selector :methSet |
			methSet size > 1
				ifTrue: [ dupes add: className -> (selector -> methSet) ]]].
	dupes size
%
	logout

errorCount

!========================================================================
output pop
exit
