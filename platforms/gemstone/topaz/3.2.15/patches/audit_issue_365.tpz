output pushnew audit_issue_365.out

  iferr 1 stk
  iferr 2 stack
  iferr 3 exit 1

  set u SystemUser p swordfish
  login

	run
	|  res loadedPackage loadedProject auditLoadedClassBlock auditLoadedClassExtensionBlock |
	GsFile gciLogServer: '--STARTING ROWAN AUDIT'.
	auditLoadedClassBlock := [:aLoadedClass |
		| ar |
		ar := {}.
		(Rowan globalNamed: aLoadedClass name) 
			ifNil: [
				ar addAll: { 'Class does not exists ' -> aLoadedClass name }.
				GsFile gciLogServer: 'Class does not exist ', aLoadedClass name ]
			ifNotNil: [:aBehavior |
				| lc |
				(lc := Rowan image loadedClassNamed: aLoadedClass name ifAbsent: []) == aLoadedClass
					ifFalse: [
						lc isNil
							ifTrue: [ 
								ar addAll: { 'Loaded class not registered'  -> aLoadedClass name  }.
								GsFile gciLogServer: 'Loaded class not registered ', aLoadedClass name ]
							ifFalse: [ 
								ar addAll: { 'Loaded class not identical to registered class '  -> aLoadedClass name  }.
								GsFile gciLogServer: 'Loaded class not identical to registered class ', aLoadedClass name ] ].
				"check for non-extension methods that are not packaged in Rowan" 
				(aBehavior selectors reject: [:e |  
					((aBehavior categoryOfSelector: e) first == $*) or: [
						aLoadedClass includesSelector: e isMeta: false]]) 
							do: [:aSelector |
								ar addAll: { aSelector  -> ' Missing loaded method '  }.
								GsFile gciLogServer: 'Missing loaded method ', aLoadedClass name, '>>', aSelector ].
				(aBehavior class selectors reject: [:e | 
					((aBehavior class categoryOfSelector: e) first == $*) or: [
						aLoadedClass includesSelector: e isMeta: true]]) 
							do: [:aSelector |
								ar addAll: {aSelector  -> 'Missing loaded classmethod ' }.
								GsFile gciLogServer: 'Missing loaded method ', aLoadedClass name, ' class>>', aSelector ].
				"look for methods removed outside of Rowan API"
				aLoadedClass 
					loadedInstanceMethodsDo: [ :loadedProject :loadedPackage :loadedClass :aLoadedMethod | 
						(aBehavior compiledMethodAt: aLoadedMethod name otherwise: nil) 
							ifNil: [
								ar addAll: { aLoadedMethod name  -> 'Missing compiled method: ' }.
								GsFile gciLogServer: 'Missing compiled method ', loadedClass name, '>>', aLoadedMethod name ] ]
					loadedClassMethodsDo: [:loadedProject :loadedPackage :loadedClass :aLoadedMethod |
						(aBehavior class compiledMethodAt: aLoadedMethod name otherwise: nil) 
							ifNil: [
								ar addAll: { aLoadedMethod name  -> 'Missing compiled classmethod ' }.
								GsFile gciLogServer: 'Missing compiled method ', loadedClass name, ' class>>', aLoadedMethod name ] ] ].
		ar ].

	auditLoadedClassExtensionBlock := [:aLoadedClassExtension |
		| ar |
		ar := {}.
		(Rowan globalNamed: aLoadedClassExtension name) 
			ifNil: [ 
				ar addAll: { 'Class does not exists '-> aLoadedClassExtension name }.
				GsFile gciLogServer: 'Class does not exist ', aLoadedClassExtension name ]
			ifNotNil: [ :aBehavior |
				| selectors extensionCategoryName les |
				les := nil.
				((Rowan image loadedClassExtensionsNamed: aLoadedClassExtension name ifFound: [:set | les := set ]  ifAbsent: [ #() ]) includesIdentical: aLoadedClassExtension)
					ifFalse: [
						les isNil
							ifTrue: [ 
								ar addAll: { 'Loaded class extension not registered'  -> aLoadedClassExtension name  }.
								GsFile gciLogServer: 'Loaded class not registered ', aLoadedClassExtension name ]
							ifFalse: [ 
								ar addAll: { 'Loaded class extension not identical to registered class '  -> aLoadedClassExtension name  }.
								GsFile gciLogServer: 'Loaded class not identical to registered class ', aLoadedClassExtension name ] ].

				extensionCategoryName := '*', aLoadedClassExtension loadedPackage name asLowercase.

				((aBehavior _baseCategorys: 0) keys
						detect: [:each | each equalsNoCase: extensionCategoryName ]
						ifNone: [ ])
					ifNotNil: [:categoryName |
						selectors := aBehavior selectorsIn: categoryName.
						(selectors reject: [:e | 
							aLoadedClassExtension includesSelector: e isMeta: false]) 
								do: [:aSelector |
									ar addAll: { aSelector -> 'Missing loaded extension method' ->  aSelector }.
									GsFile gciLogServer: 'Missing loaded extension method ', aLoadedClassExtension name, '>>', aSelector ].
						selectors do: [:sel |
							| cMeth lMeth |
							(cMeth := aBehavior compiledMethodAt: sel otherwise: nil) == (lMeth := (aLoadedClassExtension loadedInstanceMethods at: sel) handle)
								ifFalse: [
									ar addAll: { sel -> 'compiled Method is not identical to loaded Method' }.
									GsFile gciLogServer: 
										'Compiled Method (oop: ', 
										cMeth asOop printString, 
										') is not identical to loaded Method (oop: ',
									  lMeth asOop printString, 
										') ', 
										aLoadedClassExtension name, 
										'>>', 
										sel ] ] ]
					ifNil: [ 
						aLoadedClassExtension loadedInstanceMethods isEmpty not
							ifTrue: [
								ar addAll: 
									{('expected methods in the category ', extensionCategoryName printString, ' are missing') -> aLoadedClassExtension name }.
								GsFile gciLogServer: 'expected methods in category ', extensionCategoryName printString, 'for class ', aLoadedClassExtension name printString ] ].

				((aBehavior class _baseCategorys: 0) keys
						detect: [:each | each equalsNoCase: extensionCategoryName ]
						ifNone: [ ])
					ifNotNil: [:categoryName |
						selectors := aBehavior class selectorsIn: categoryName.
						(selectors reject: [:e | aLoadedClassExtension includesSelector: e isMeta: true]) do: [:aSelector |
								ar addAll: {aSelector -> 'Missing loaded extensions classmethod: ' }.
								GsFile gciLogServer: 'Missing loaded extension method ', aLoadedClassExtension name, ' class>>', aSelector ].
						selectors do: [:sel |
							| cMeth lMeth |
							(cMeth := aBehavior class compiledMethodAt: sel otherwise: nil) == (lMeth := (aLoadedClassExtension loadedClassMethods at: sel) handle)
								ifFalse: [
									ar addAll: { sel -> 'class compiled Method is not identical to loaded Method' }.
									GsFile gciLogServer: 
										'Compiled Method (oop: ', 
										cMeth asOop printString, 
										') is not identical to loaded Method (oop: ',
									  lMeth asOop printString, 
										') ', 
										aLoadedClassExtension name, 
										' class>>', 
										sel ] ]  ]
					ifNil: [
						aLoadedClassExtension loadedClassMethods isEmpty not
							ifTrue: [ 
								ar addAll: {('expected class methods in the category ', extensionCategoryName printString, ' are missing') -> aLoadedClassExtension name }.
								GsFile gciLogServer: 'expected methods in category ', extensionCategoryName printString, 'for class ', aLoadedClassExtension name printString, ' class' ] ].
				"look for methods removed outside of Rowan API"
				aLoadedClassExtension 
					loadedInstanceMethodsDo: [:loadedProject :loadedPackage :loadedClass :aLoadedMethod | 
						(aBehavior compiledMethodAt: aLoadedMethod name otherwise: nil) 
							ifNil: [
								ar addAll: {aLoadedMethod name -> 'Missing compiled method: ' }.
								GsFile gciLogServer: 'Missing compiled  method ', loadedClass name, '>>', aLoadedMethod name ] ]
					loadedClassMethodsDo: [:loadedProject :loadedPackage :loadedClass :aLoadedMethod |
						(aBehavior class compiledMethodAt: aLoadedMethod name otherwise: nil) 
							ifNil: [
								ar addAll: { aLoadedMethod name -> 'Missing compiled class method: ' }.
								GsFile gciLogServer: 'Missing compiled  class method ', loadedClass name, ' class>>', aLoadedMethod name ] ] ].
		ar ].
		

	res := Dictionary new.
	Rowan projectNames do: [:projectName |
		GsFile gciLogServer: '---Auditing project: ', projectName printString.
		loadedProject := Rowan image loadedProjectNamed: projectName.
		loadedProject loadedPackages do: [:loadedPackage |
			| lp |
			GsFile gciLogServer: ' --Auditing package: ', loadedPackage name printString.
			(lp := Rowan image loadedPackageNamed: loadedPackage name ifAbsent: []) == loadedPackage
				ifFalse: [
					lp isNil
						ifTrue: [ 
							res at: 'Package:', loadedPackage name put: { loadedPackage name  -> ' is missing from the package registry.' }.
							GsFile gciLogServer: 'The package', loadedPackage name printString, ' is missing from the package registry.' ] 
						ifFalse: [ 
							res at: 'Package:', loadedPackage name put: { loadedPackage name  -> ' is not identical to the registered package.' }.
							GsFile gciLogServer: 'The package', loadedPackage name printString, ' is not identical to the registered loaded package' ] ].
			loadedPackage
				loadedClasses
					valuesDo: [:aLoadedClass |
						(auditLoadedClassBlock value: aLoadedClass) 
							ifNotEmpty: [:aColl | res at: aLoadedClass name put: aColl ] ].
			loadedPackage
				loadedClassExtensions
					valuesDo: [:aLoadedClass | 
						(auditLoadedClassExtensionBlock value: aLoadedClass) 
							ifNotEmpty: [:aColl | res at: aLoadedClass name put: aColl ] ] ] ].
	UserGlobals at: #ROWAN_AUDIT_issue_365_results put: res.
	GsFile gciLogServer: '--ENDING ROWAN AUDIT'.
	true
%
  commit

  logout
	errorCount

	output pop
