
  iferr 1 stk
  iferr 2 stack
  iferr 3 exit 1

  set u SystemUser p swordfish
  login

method: Class
_equivalentSubclass: oldClass superCls: actualSelf name: aString newOpts: optionsArray 
    newFormat: theFormat
    newInstVars: anArrayOfInstvarNames 
    newClassInstVars: anArrayOfClassInstVars newPools: anArrayOfPoolDicts 
    newClassVars: anArrayOfClassVars inDict: aDictionary constraints: aConstraint
    isKernel: isKernelBool 

"oldClass is equivalent to the subclass that would be created using
 the other arguments if 
     instVar names match exactly ,
   and class instVar names match exactly ,
   and the classVars in oldClass can be modified to add/remove Associations 
     to match anArrayOfClassVars ,
   and pool dictionaries match exactly,
   and (constraints match exactly  or( aConstraint size == 0 and oldClass has a reserved oop))

  With respect to options and format, oldClass is equivalent if
    The state of format bits dbTransient, instancesNonPersistent, instancesInvariant  
     match exactly ,
    and subclassesDisallowed cannot be set in the new subclass if it not set in oldClass ,
    and modifiable  cannot be set if it is not set in oldClass  ,
    and  (SELF_CAN_BE_SPECIAL, NSC_DUPLICATES, INDEXABLE, IMPLEMENTATION, NO_STRUCT_UPDATE bits)
        of the formats must match exactly.

  If all other equivalence tests pass, the following changes to oldClass may be 
  made to match the arguments and avoid creating a new subclass
    subclassesDisallowed bit may be cleared in format of oldClass 
    traverseByCallback bit may be set or cleared in format of oldClass
    oldClass may be changed from modifiable to not modifiable (by sending immediateInvariant)
    classVars may be added to oldClass 
    classVars having modifiable Associations may be removed from oldClass 
" 
  | oldOk fmtArr 
    nam supr opts ivs civs poolds cvars constr 
    cvarsArray |
  fmtArr := self _validateOptions: optionsArray withFormat: theFormat .
  (oldClass isKindOf: Class ) ifFalse:[ oldClass _validateClass: Class ].
  nam := oldClass name asString = aString asString .
  supr := oldClass superClass == actualSelf .
  opts := oldClass _optionsChangableTo: fmtArr .
  ivs := oldClass _instVarsEqual: anArrayOfInstvarNames . 
  civs := oldClass class _instVarsEqual: anArrayOfClassInstVars.
  poolds := oldClass  _poolDictsEqual: anArrayOfPoolDicts. 
  cvars := oldClass  _classVarsChangableTo: (cvarsArray := anArrayOfClassVars copy ) .
  constr := ( isKernelBool and:[ aConstraint size == 0]) ifTrue:[ true ] 
                      ifFalse:[ oldClass _constraintsEqual: aConstraint ] .
  oldOk := nam and:[ supr and:[ opts and:[ ivs and:[ civs and:[ poolds 
       and:[ cvars and:[ constr ]]]]]]].
  oldOk ifTrue:[ | oldVal newName |
    newName := aString asSymbol .
    oldVal := aDictionary at: newName otherwise:nil .
    oldVal == oldClass ifFalse:[
      ImproperOperation signal:'no new subclass needed, but aDictionary at: oldClass name ~~ oldClass' .
      ^ false
    ] .
    oldClass _adjustOptions: optionsArray formatArr: fmtArr .
    oldClass _adjustClassVars: cvarsArray .
    (fmtArr at: 3) ifTrue:[ GsFile gciLogServer: 'class ' , aString , ' equivalent to reqested class'].
    ^ true
  ] ifFalse:[ 
    (fmtArr at: 3) ifTrue:[ GsFile gciLogServer: 
      '_equivalentSubclass false, nam:', nam asString , ' supr:', supr asString , ' opts:', opts asString,
      ' ivs:', ivs asString,  ' civs:' , civs asString , ' poolds:', poolds asString,
      ' cvars:', cvars asString , ' constr:', constr asString  .
    ].
  ].
  ^ false 
%
	commit

  input $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.2.15/cypress/bootstrapCypressSupport.topaz
  input $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.2.15/ston/bootstrapStonSupport.topaz
  input $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.2.15/tonel/bootstrapTonelSupport.topaz
  commit

  logout

output push rowan_issue_365.out

input $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.2.15/patches/Rowan-Bootstrap-issue_365.gs
errorCount

output pop
