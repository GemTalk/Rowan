#

	omit pushonly
  iferr 1 stk
  iferr 2 stack
#  iferr 3 exit 1

  set u SystemUser p swordfish
  login

# Install FileSystem, Rowan, Cypress, STON, and Tonel using Rowan to adopt the existing classes and extension
#  methods into the correct package structure
  run
	"install_3_RowanV2.tpz"
 	| projectSetDefinition auditFailures reAudit theProjectSetDefinition |
	Rowan projectTools trace startTracing; trace: '--- installing install_3_RowanV2.tpz'.
	{
		{
			'file:$ROWAN_PROJECTS_HOME/Rowan/rowan/v2/proposed_specs/Rowan_proposed_2.ston'. 
			'$ROWAN_PROJECTS_HOME'
		}.
	} 
	do: [:ar |
		"Load project and packages from disk"
		| specUrl projectsHome loadSpec  resolvedProject|
		specUrl := ar at: 1.
		projectsHome := ar at: 2.
		loadSpec := RwSpecification fromUrl: specUrl.
		resolvedProject := loadSpec
			projectsHome: projectsHome;
			resolve.
		projectSetDefinition := resolvedProject readProjectSet ].

	theProjectSetDefinition := RwProjectSetDefinition new.
	projectSetDefinition projects 
		do: [:resolvedProject |
			"Create loaded project (if needed), traverse the package definitions and 
				create loaded packages for each"
			| resolvedProject_copy projectDefinition |
			"make a copy of the resolvedProject (and repair it for now, since copyForLoadedProject is somewhat destructive"
			resolvedProject_copy := resolvedProject copyForLoadedProject.
			projectDefinition := resolvedProject _projectDefinition copy.
			projectDefinition components: resolvedProject_copy _projectStructure.
			resolvedProject_copy 
				_projectDefinition: projectDefinition;
				_projectStructure: nil;
				yourself.
			"wipe out package contents, so we can load *empty* project and packages, that will be adopted in next step"
			GsFile stdout nextPutAll: 'Project: ', resolvedProject_copy name; lf.
			resolvedProject_copy packageNames
				do: [:packageName |
					GsFile stdout nextPutAll: '	', packageName; lf.
					(resolvedProject_copy packageNamed: packageName)
						classDefinitions: Dictionary new;
						classExtensions: Dictionary new;
						yourself ].
			theProjectSetDefinition addProject: resolvedProject_copy ].
	"Load the project shell -- project and empty packages"
	Rowan projectTools loadV2 loadProjectSetDefinition: theProjectSetDefinition.
  SessionTemps current removeKey: #ROWAN_TRACE ifAbsent: []. "end logging to topaz output file"

	"Adopt the project set definition ... 
		Log and ignore any missing method or missing classes encountered as they may not be
		present in the .gs bootstrap file for the proejct ... The will be created when we
		reload the project a little bit later on."
	[ Rowan projectTools adopt adoptProjectSetDefinition: projectSetDefinition ]
		on: RwAdoptMissingMethodErrorNotification, RwAdoptMissingClassErrorNotification
		do: [:ex |
			ex
				methodErrorDo: [ GsFile gciLogServer: 'Missing loaded method ', ex methodPrintString, ' encountered during adopt ... IGNORED' ]
				classErrorDo: [  GsFile gciLogServer: 'Missing loaded class ', ex className, ' encountered during adopt ... IGNORED' ].
			ex resume: nil ].

	projectSetDefinition deriveLoadedThings do: [:loadedProject |
		"mark projects and packages not dirty"
		loadedProject markNotDirty.
		loadedProject loadedPackages valuesDo: [:loadedPackage | loadedPackage markNotDirty ] ].

	reAudit := true.	"kick off the first audit"
	[ reAudit ] whileTrue: [
		auditFailures := {}.
		reAudit := false.
		projectSetDefinition projects
			do: [:projectDefinition |
				| audit projectName |
				projectName := projectDefinition name.
				[audit := Rowan projectTools audit auditForProjectNamed: projectName ]
					on: RwAuditMethodErrorNotification
					do: [:ex |
						| beh |
						GsFile gciLogServer: 'extra unpackaged method ', ex methodPrintString, ' encountered during audit ... REMOVED (audit will be rerun)'.
						"method is not present in the current package structure, so it should be removed"
						beh := Rowan globalNamed: ex className.
						ex isMetaclass ifTrue: [ beh := beh class ].
						beh removeSelector: ex selector.
						"don't record as an audit error, but make sure that we rerun the audit"
						reAudit := true.
						ex resume: false ].
				GsFile gciLogServer: '	-- audit finished '. 
				audit isEmpty 
					ifFalse: [
						reAudit := false. "we must have had an audit failure that was not handled" 
GsFile gciLogServer: 'FAILED AUDIT: ', projectName.
						auditFailures add: projectName ] ].
		reAudit ifTrue: [ GsFile gciLogServer: 'RERUN AUDIT' ] ].
	auditFailures isEmpty 
		ifFalse: [ 
			self error: 'Post load Rowan audit failed for projects ', auditFailures printString ] .
  true	
%
  commit

# Install Rowan class in Published symbol dict, so it is availailable to all users
# 
   run
  | rowanAssoc |
  rowanAssoc := RowanKernel associationAt: #Rowan.
  Published add: rowanAssoc. true
%
  commit

  logout

	errorCount

