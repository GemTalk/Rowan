#!/usr/local/bin/smalltalk/gemstone/topaz
#
# If you are using GsDevKit_home[1] and have stash[2] installed, this topaz 
#	script can be directly executed:
#
#		$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.2.15/install_3.tpz <gsdevkit-stone-name> -lq
#
# If you are not using GsDevKit_home, you can directly run this script as long as
# 	1. $GEMSTONE is defined
# 	2. $GEMSTONE/bin is you path
#	then execute using the following invocation
#
#		$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.2.15/install_1.tpz -lq
#
#	[1] https://github.com/GsDevKit/GsDevKit_home
# [2] https://github.com/dalehenrich/stash
#

	omit pushonly
  iferr 1 stk
  iferr 2 stack
#  iferr 3 exit 1

  set u SystemUser p swordfish
  login

# Install FileSystem, Rowan, Cypress, STON, and Tonel using Rowan to adopt the existing classes and extension
#  methods into the correct package structure
  run
	"install_3.tpz"
 	| projectSetDefinition gitRepoPath packageCreateTool loadedProjectInfo auditFailures readTool
		reAudit gitRoot |
  SessionTemps current at: #ROWAN_TRACE put: #gciLogServer . "log to topaz output file"
	projectSetDefinition := RwProjectSetDefinition new.
	loadedProjectInfo := Dictionary new.
	gitRepoPath := '$ROWAN_PROJECTS_HOME/Rowan'.
	readTool := Rowan projectTools read.
	{
		{
			'file:$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.5.0/specs/FileSystemGs_component.ston'. 
			'$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/projects'
		}.
		{
			'file:$ROWAN_PROJECTS_HOME/Rowan/rowan/specs/RowanV2.ston'. 
			'$ROWAN_PROJECTS_HOME'
		}.
		{
			'file:$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.5.0/specs/Cypress_component.ston'.
			'$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/projects'
		}.
		{
			'file:$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.5.0/specs/STON_component.ston'.
			'$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/projects'
		}.
		{
			'file:$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/3.5.0/specs/Tonel_component.ston'.
			'$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/projects'
		}.
	} 
	do: [:ar |
		"Read project and packages from disk, creating a projectSetDefinition with all 5 projects"
		| configNames groupNames projectDefinition theProjectSetDefinition specUrl projectHome |
		specUrl := ar at: 1.
		projectHome := ar at: 2.
		gitRoot := '$ROWAN_PROJECTS_HOME/Rowan'.
		projectDefinition := (RwComponentProjectDefinition newForUrl: specUrl) 
			projectHome: projectHome;
			gitRoot: gitRoot;
			yourself.
		theProjectSetDefinition := readTool 
			readProjectSetForComponentProjectDefinition: projectDefinition 
				withConfigurations: projectDefinition defaultConfigurationNames 
				groupNames: {'core' . 'tests' . 'deprecated' . 'jadeServer'.  'deprecated tests' }.

		loadedProjectInfo 
			at: projectDefinition name 
			put: ((theProjectSetDefinition properties at: 'loadedProjectInfo') at: projectDefinition name).

		theProjectSetDefinition
			do: [:projectDefinition |	
				GsFile stdout nextPutAll: 'Project: ', projectDefinition name; lf.
				projectDefinition packageNames do: [:pkgName | 
					GsFile stdout nextPutAll: '	', pkgName; lf ].
				projectSetDefinition addProject: projectDefinition ] ].

	loadedProjectInfo keysAndValuesDo: [:projectName :projectInfo |
		"install the packageMapSpecs for this load into the specification prior to the load"
		| projectDefinition thePackageMapSpecs |
		projectDefinition := projectSetDefinition projectNamed: projectName ifAbsent: [].
		thePackageMapSpecs := projectInfo at: 'packageMapSpecs' .
		(thePackageMapSpecs at: #defaultSymbolDictName otherwise: nil) 
			ifNotNil: [:name | 
				projectDefinition defaultSymbolDictName: name ].
		(thePackageMapSpecs at: #defaultUseSessionMethodsForExtensions otherwise: nil) 
			ifNotNil: [:boolean | 
				projectDefinition defaultUseSessionMethodsForExtensions: boolean  ].
		(thePackageMapSpecs at: #packageNameToPlatformPropertiesMap otherwise: nil) 
			ifNotNil: [:map |
				projectDefinition packageNameToPlatformPropertiesMap: map ] ].

	packageCreateTool := Rowan packageTools create.
	projectSetDefinition projects 
		do: [:projectDefinition |
			"Create loaded project (if needed), traverse the package definitions and 
				create loaded packages for each"
			| projectName |
			projectDefinition register.	"make sure that the project is created"
			projectName := projectDefinition name.
			projectDefinition packageNames
				do: [:packageName |
					packageCreateTool createLoadedPackageNamed: packageName inProjectNamed: projectName ] ].

	"Adopt the project set definition ... 
		Log and ignore any missing method or missing classes encountered as they may not be
		present in the .gs bootstrap file for the proejct ... The will be created when we
		reload the project a little bit later on."
	[ Rowan projectTools adopt adoptProjectSetDefinition: projectSetDefinition ]
		on: RwAdoptMissingMethodErrorNotification, RwAdoptMissingClassErrorNotification
		do: [:ex |
			ex
				methodErrorDo: [ GsFile gciLogServer: 'Missing loaded method ', ex methodPrintString, ' encountered during adopt ... IGNORED' ]
				classErrorDo: [  GsFile gciLogServer: 'Missing loaded class ', ex className, ' encountered during adopt ... IGNORED' ].
			ex resume: nil ].

	projectSetDefinition projects 
		do: [:projectDefinition |
			"make sure that the loaded SHA is set for each project"
			projectDefinition updateLoadedCommitId.
			(loadedProjectInfo at: projectDefinition name ifAbsent: [])
				ifNotNil: [:map |
					projectDefinition specification imageSpec
						loadedConfigurationNames: (map at: 'loadedConfigurationNames');
						loadedGroupNames: (map at: 'loadedGroupNames') ] ].

	projectSetDefinition deriveLoadedThings do: [:loadedProject |
		"mark projects and packages not dirty"
		loadedProject markNotDirty.
		loadedProject loadedPackages valuesDo: [:loadedPackage | loadedPackage markNotDirty ] ].

	reAudit := true.	"kick off the first audit"
	[ reAudit ] whileTrue: [
		auditFailures := {}.
		reAudit := false.
		projectSetDefinition projects
			do: [:projectDefinition |
				| audit projectName |
				projectName := projectDefinition name.
				[audit := Rowan projectTools audit auditForProjectNamed: projectName ]
					on: RwAuditMethodErrorNotification
					do: [:ex |
						| beh |
						GsFile gciLogServer: 'extra unpackaged method ', ex methodPrintString, ' encountered during audit ... REMOVED (audit will be rerun)'.
						"method is not present in the current package structure, so it should be removed"
						beh := Rowan globalNamed: ex className.
						ex isMetaclass ifTrue: [ beh := beh class ].
						beh removeSelector: ex selector.
						"don't record as an audit error, but make sure that we rerun the audit"
						reAudit := true.
						ex resume: false ].
				GsFile gciLogServer: '	-- audit finished '. 
				audit isEmpty 
					ifFalse: [
						reAudit := false. "we must have had an audit failure that was not handled" 
GsFile gciLogServer: 'FAILED AUDIT: ', projectName.
						auditFailures add: projectName ] ].
		reAudit ifTrue: [ GsFile gciLogServer: 'RERUN AUDIT' ] ].
	auditFailures isEmpty 
		ifFalse: [ 
			self error: 'Post load Rowan audit failed for projects ', auditFailures printString ] .
  true	
%
  commit

# Install Rowan class in Published symbol dict, so it is availailable to all users
# 
   run
  | rowanAssoc |
  rowanAssoc := RowanKernel associationAt: #Rowan.
  Published add: rowanAssoc. true
%
  commit

  logout
  set u DataCurator p swordfish
  login

# set rowanCompile to true 
#
run
UserGlobals at: #rowanCompile put: true.
%
  commit

	logout

	errorCount

