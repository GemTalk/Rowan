#!/usr/bin/env superdoit_stone
# Standard options are always present unless customoptions section is used
#
#options
#{
#  SuperDoitOptionalOptionWithNoArg long: 'help' short: 'h'.
#  SuperDoitOptionalOptionWithNoArg long: 'debug' short: 'D'.
#}
#%
# Example options section
#
#options
#{
#	SuperDoitOptionalOptionWithNoArg long: 'noarg'.
#	SuperDoitOptionalOptionWithNoArg long: 'noarg' short: 'n'.
#
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' default: 'default'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o' default: 'default'.
#
#	SuperDoitRequiredOptionWithRequiredArg long: 'required'.
#	SuperDoitRequiredOptionWithRequiredArg long: 'required' short: 'r'.
#}
#%
#
usage
-----
USAGE 
  # with GS_HOME set (<stone-name> optional if run in $GS_HOME/servers/stones/<stone-name> directory)
  $basename [--help | -h] [--debug | -D] [-- [<stone-name> [<topaz-command-line-args>] ] ]
  # with GEMSTONE set
  $basename [--help | -h] [--debug | -D] -- ([-r] | -l | -L) -I <path-to-.topazini> [<topaz-command-line-args>]

DESCRIPTION
  Unconditionally rewrite all of the packages ... ensure all class and extension 
  files are in canonical order ... most useful after merging conflicts

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename --help                           -- gs_351             # with GS_HOME set
  $basename -h                               -- -l -I ./.topazini  # with GEMSTONE set
  $basename --help                           <topaz-arguments>
  $basename -D <script-arguments>            <topaz-arguments>
  $basename --debug <script-arguments>       <topaz-arguments>
  $basename <script-arguments>               <topaz-arguments>
-----
%
doit
	| project projectSetDefinition projectSetModification visitor |
	project := Rowan 
		projectFromUrl: 'file:$ROWAN_PROJECTS_HOME/Rowan/rowan/specs/Rowan.ston'
		projectsHome: '$ROWAN_PROJECTS_HOME' 
		componentNames: { 'Rowan' } 
		customConditionalAttributes:
			{ 
				'stubs'.
				'tonel'.
				'v2'.
				'v2Only'.
				'examples'.
				'tests'.
			}.
	projectSetDefinition := RwProjectSetDefinition new.
	projectSetDefinition addDefinition: project _concreteProject.
	projectSetModification := projectSetDefinition
		compareAgainstBase: RwProjectSetDefinition new.
	(visitor := RwModificationTonelWriterVisitorV2 new)
		packagesRoot: project packagesRoot .
	visitor visit: projectSetModification.
	^ self noResult
%
