#!/usr/bin/env superdoit_stone
options
{
  SuperDoitOptionalOptionWithRequiredArg long: 'debugSelector'.
  SuperDoitOptionalOptionWithNoArg long: 'legacyUnicode'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D] [--legacyUnicode] [-- [<stone-name> [<topaz-command-line-args>] ] ]

DESCRIPTION
  Install an AlmostOutOfMemory handler; use portable streams and String mode
  (with --legacyUnicode use legacy streams and Unicode mode); and then run
  test suite using $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/rowanTestSuiteRowanV2.gs.

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

  --legacyUnicode            Install legacy implementation and unicode mode
  --debugSelector=<test-selector>
                             The test that matches the <test-selector> will be
                             executed using #debug: so the debugger will come
                             up during the test run, if the test fails or
                             errors

EXAMPLES
  $basename -- test_rowan_dev_l
  $basename --legacyUnicode -- test_rowan_dev_l
  $basename --debugSelector=testIssue295_rename_package_move_newClassVersion_newProject_3 -- test_rowan_dev_l
  $basename --legacyUnicode -- test_rowan_dev_l
-----
%
method
handleAlmostOutOfMemory
  AlmostOutOfMemory enableAtThreshold: 75.
  AlmostOutOfMemory
    addDefaultHandler: [ :ex | 
      self halt.
      AlmostOutOfMemory enableAtThreshold: 75.
      ex resume ]
%
method
installLegacyUnicode
	Stream installLegacyStreamImplementation.
	System commit.
	Unicode16 usingUnicodeCompares 
		ifFalse: [ self error: 'Expected to be in Unicode comparison mode' ].
	PositionableStream isLegacyStreamImplementation
		ifFalse: [ self error: 'Expected to be using Legacy streams' ].
%
method
installPortableString
	Unicode16 usingUnicodeCompares 
		ifTrue: [ self error: 'Expected to be in Legacy String comparison mode' ].
	PositionableStream isLegacyStreamImplementation
		ifTrue: [ self error: 'Expected to be using Portable streams' ].
%
method
projectNames
	^  #( 'Rowan' 'STON' 'Cypress' 'FileSystemGs' 'RowanClientServices' )
%
method
loadTests
		| warnings |
		warnings := {}.
		self projectNames do: [:projectName |
			| audit |
			audit := Rowan projectTools audit auditForProjectNamed: projectName.
			audit isEmpty ifFalse: [ self error: 'Pre load Rowan audit failed for project ', projectName printString ] ].

		self projectNames do: [:projectName |
			[		
				"make sure test group is loaded ... do NOT include deprecated packages"
				Rowan projectTools loadV2
					loadProjectNamed: projectName
					customConditionalAttributes: #('tests' 'testsV2')
 				] on: CompileWarning do: [:ex |
					(ex description includesString: 'not optimized')
						ifFalse: [ warnings add: ex asString printString ].
					ex resume ] ].

 		warnings isEmpty ifFalse: [
			self stdout nextPutAll: 'COMPILE WARNINGS:'; lf.
			warnings do: [:warning |self stdout nextPutAll: '	', warning ]. 
			self error: 'Warnings during project load' ]. 

		System commit. "do a commit immediately after test code is loaded, to avoid losing test classes if a test does an abort"

		"audit after load"
		self projectNames do: [:projectName |
			| audit |
			audit := Rowan projectTools audit auditForProjectNamed: projectName.
			audit isEmpty ifFalse: [ self error: 'Post load Rowan audit failed for project ', projectName printString ] ].
%
method
_processTestResults: res suite: suite deprecationErrors: deprecationErrors
		| strm resultsDict resultCases |
		resultsDict := Dictionary new.
		resultCases := {}.
		resultsDict 
			at: #suiteName put: suite name;
			at: #timeStamp put: DateAndTime now printString;
			at: #properties put: (Dictionary new);
			at: #notes put: '';
			at: #gsVersion put: (System gemVersionAt: #gsVersion);
			at: #testCases put: resultCases;
			at: #resultsSummary put: (Dictionary new
				at: #summary put: res printString;
				at: #failures put: res failureCount;
				at: #errors put: res errorCount;
				at: #passed put: res passedCount;
				yourself)
			yourself.

		strm := self stdout.
 		strm nextPutAll: suite name, ' for GemStone ', (System gemVersionAt: #gsVersion) printString; lf.
		res passed do: [:each |
			resultCases add: (Dictionary new
					at: #className put: each class asString;
					at: #selector put: each selector asString;
					at: #status put: 'passed';
					yourself) ].

		strm nextPutAll: res printString; nextPutAll: ', ', deprecationErrors printString, ' deprecationErrors'; lf.
		strm nextPutAll: '  errors'; lf.
		(res errors collect: [:each |  
			resultCases add: (Dictionary new
					at: #className put: each class asString;
					at: #selector put: each selector asString;
					at: #status put: 'errors';
					yourself). 
			each printString ]) asArray sort do: [:each |
			strm tab; nextPutAll: each; lf].
		res failures size > 0
			ifTrue: [
				strm nextPutAll: '  failures'; lf.
				(res failures collect: [:each | 
					resultCases add: (Dictionary new
							at: #className put: each class asString;
							at: #selector put: each selector asString;
							at: #status put: 'failures';
							yourself). 
					each printString]) asArray sort do: [:each |
					strm tab; nextPutAll: each; lf ] ].

		(FileSystem workingDirectory / 'testResults', 'json')
			writeStreamDo: [:fileStream | STON put: resultsDict asJsonOnStreamPretty: fileStream ].
%
method
runTests
		| suite res deprecationErrors |
		suite := Rowan projectTools test testSuiteForProjectsNamed: self projectNames.
		self debugSelector
			ifNotNil: [:sel |
				| debugSelector |
				debugSelector := sel asSymbol.
				"debug selectors that only fail during full test run"
				res := TestResult new.
				suite tests do: [:each | 
					each selector == debugSelector
							ifTrue: [ each debug ]
							ifFalse: [ 
								[ each run: res ] 
									on: Deprecated do: [:ex |
										ex resignalAs: (Error new messageText: ex description; yourself) ] ] ] ]
			ifNil: [
				deprecationErrors := 0.
				[ 
					res := suite run.
				] on: Deprecated do: [:ex |
					deprecationErrors := deprecationErrors + 1.
					ex resignalAs: (Error new messageText: ex description; yourself)
					] ].
		self _processTestResults: res suite: suite deprecationErrors: deprecationErrors.
%
method
rowanTestSuite
	self handleAlmostOutOfMemory.
	self legacyUnicode
		ifTrue: [ self installLegacyUnicode ]
		ifFalse: [ self installPortableString ].
	self loadTests.
	self runTests.
%
doit
	self stdout 
		nextPutAll: '================='; lf;
		space; space; space; nextPutAll: self basename; lf;
		nextPutAll: '================='; lf;
		yourself.
	self rowanTestSuite.
	self stdout nextPutAll: '...finished :: ', self basename; lf.
	^ self noResult
%
