#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2018 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/dalehenrich/Rowan/blob/master/LICENSE
#=========================================================================

set -e

# Usage:
#  $ROWAN_PROJECTS_HOME/Rowan/bin/packing_oscar <base_label> <rowan_tag> <jadeite_tag>
#
# 1. clone the Rowan project
# 2. confirm that the master branches of Rowan is on the correct tag
# 3. Create Jadeite runtime directory (Jadeite_runtime) and download .exe from github for given tag
# 4. create MANIFEST.TXT and list the sha of the commit for each of the git 
#    projects along with the name of the file or directory
# 5. zip up the Rowan project the 
#    Jadeite_runtime directory  plus any .pdf documents present
# 6. Archive the zip file and stage for delivery
#
# 1.1.0 candidate $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.1.0-candidate v1.1.0-candidate Oscar-3.0.16-candidate /export/gcm/where/gemstone64/releases/Edelweiss/sett/Sett1.0.zip
# 1.1.0 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.1.0 v1.1.0 Oscar-3.0.16 /export/gcm/where/gemstone64/releases/Edelweiss/sett/Sett1.0.zip
# 1.1.1 candidate $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.1.1-candidate v1.1.1-candidate Oscar-3.0.16 /export/gcm/where/gemstone64/releases/Edelweiss/sett/Sett1.0.zip
# 1.1.1 candidate 2 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.1.1-candidate_2 v1.1.1-candidate_2 Oscar-3.0.16 /export/gcm/where/gemstone64/releases/Edelweiss/sett/Sett1.0.zip
# 1.1.1 candidate 3 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.1.1-candidate_3 v1.1.1-candidate_3 Oscar-3.0.16 /export/gcm/where/gemstone64/releases/Edelweiss/sett/Sett1.0.zip
# 1.1.3 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.1.3 v1.1.3 Oscar-3.0.16 /export/gcm/where/gemstone64/releases/Edelweiss/sett/Sett1.0.zip
# 1.1.4 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.1.4 v1.1.4 Oscar-3.0.16 /export/gcm/where/gemstone64/releases/Edelweiss/sett/Sett1.0.zip
# 1.1.5 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.1.5 v1.1.5 Oscar-3.0.16 /export/gcm/where/gemstone64/releases/Edelweiss/sett/Sett1.0.zip
# 1.1.6 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.1.6 v1.1.6 Oscar-3.0.16 /export/gcm/where/gemstone64/releases/Edelweiss/sett/Sett1.0.zip
# 1.1.7 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.1.7 v1.1.7 Oscar-3.0.16 
# 1.2.0 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.0 v1.2.0 Oscar-3.0.40 /export/gcm/where/gemstone64/releases/Edelweiss/sett/Sett1.0.zip
# 1.2.1 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.1 v1.2.1 Oscar-3.0.45 /export/gcm/where/gemstone64/releases/Edelweiss/sett/Sett1.0.zip
# 1.2.2 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.2 v1.2.2 Oscar-3.0.45 /export/gcm/where/gemstone64/releases/Edelweiss/sett/Sett1.0.zip
# 1.2.3 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.3 v1.2.3 Oscar-3.0.50
# 1.2.4 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.4 v1.2.4 Oscar-3.0.50
# 1.2.5 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.5 v1.2.5 Oscar-3.0.50
# 1.2.6 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.6 v1.2.6 Oscar-3.0.65
# 1.2.7 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.7 v1.2.7 Oscar-3.0.85
# 1.2.8 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.8 v1.2.8 Oscar-3.0.87
# 1.2.9 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.9 v1.2.9 Oscar-3.0.89
# 1.2.10 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.10 v1.2.10 Oscar-3.0.91
# 1.2.11 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.11 v1.2.11 Oscar-3.0.91.1
# 1.2.12 $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/bin/packing_oscar Edelweiss-1.2.12 v1.2.12 Oscar-3.0.91.1
#
ANSI_RED="\033[91;1m"
ANSI_GREEN="\033[92;1m"
ANSI_RESET="\033[0m"

base_label="$1"
if [ "$base_label"x = "x" ] ; then
  printf "${ANSI_RED}Missing required argument: base_label ${ANSI_RESET}\n"
  exit 1
fi
rowan_tag="$2"
jadeite_tag="$3"
rowanDeploymentBranch="masterV1.2"

if [ "production" != "production" ] ; then
	### just for debugging
	rowanDeploymentBranch="candidateV1.2.11"
	rowan_tag=""
	base_label="Edelweiss-canvidateV1.2.11"

	echo "!!!JUST FOR DEBUGGING using $rowanDeploymentBranch"
	echo "okay?"
	read ok

	### just for debugging
else
	### production run
	echo "PRODUCTION run using $rowanDeploymentBranch"
	echo "okay?"
	read ok
	### production run
fi

commit_match_tag() {
  targetTag="$1"
  commit="$2"
  set e
  git describe --match "$targetTag" "$commit"
  result=$?
  set -e
  if [ "$result" != "0" ] ; then
    printf "${ANSI_RED} Error describing commit for $projectName ... expecting tag $targetTag -- not found ${ANSI_RESET}\n"
    exit 1
  fi
}
padded_manifest_line() {
  line='                   |  '
  PROC_NAME="$1"
  printf "%s%s" $PROC_NAME "${line:${#PROC_NAME}}" >> MANIFEST.TXT
  PROC_NAME="$2"
  printf "%s%s" $PROC_NAME "${line:${#PROC_NAME}}" >> MANIFEST.TXT
  PROC_NAME="$3"
  printf "%s%s \n" $PROC_NAME "${line:${#PROC_NAME}}" >> MANIFEST.TXT
}
validate_tag() {
  projectName="$1"
  label="$2"
  tagName="$3"
  deploymentBranch="$4"
  theTag=""
  pad=""
  if [ "$projectName" = "Rowan" ] ; then
    pad="	"
  fi
  if [ "$deploymentBranch"x = "x" ] ; then
    deploymentBranch="master"
  fi
  pushd $projectName
    if [ "$tagName"x != "x" ] ; then
			theTag="$tagName"
      git checkout "$tagName"
    else
      theTag="-"
    fi
    theCommit=`git rev-parse --short HEAD`
  popd
  padded_manifest_line "$label" "$theTag" "$theCommit"
}
clone_entire_git_repo() {
  # clones the entire git repository including all branches
  url="$1"
  dir="$2"
  branch="$3"
  if [ "$branch"x = "x" ] ; then
    branch=master
  fi
  # mkdir $dir
  git clone --bare $url $dir/.git
  pushd $dir
  git config --bool core.bare false
	if [ "$tagName"x != "x" ] ; then
		git checkout $tagName
	else
  	git checkout $branch
	fi
  popd
}

cd $ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/packing

rm -rf Rowan MANIFEST.TXT Jadeite_runtime_* *.zip *.sha256 *.pdf

# Clone Rowan include all branches (complete copy of github repo)
clone_entire_git_repo git@git.gemtalksystems.com:Rowan Rowan $rowanDeploymentBranch

echo "------------------------------" >> MANIFEST.TXT
echo "  Git clone directories" >> MANIFEST.TXT
echo "------------------------------" >> MANIFEST.TXT
padded_manifest_line "Git_Project" "Tag" "SHA"
echo "-------------------|---------------------|---------------------|" >> MANIFEST.TXT
validate_tag Rowan Rowan "$rowan_tag" $rowanDeploymentBranch

# create Jadeite runtime directory
jadeite_runtime_dirName="Jadeite_runtime_${jadeite_tag}"
wget https://github.com/GemTalk/Jadeite/releases/download/"$jadeite_tag"/runtime.zip
unzip runtime.zip
mv runtime "$jadeite_runtime_dirName"

# copy documentation 
cp /export/techpubs/JadeiteCurrent/*.pdf .

echo "" >> MANIFEST.TXT
echo "------------------------------" >> MANIFEST.TXT
echo "  Jadeite runtime directory" >> MANIFEST.TXT
echo "------------------------------" >> MANIFEST.TXT
echo "Jadeite_runtime_${jadeite_tag}" >> MANIFEST.TXT

echo "" >> MANIFEST.TXT
echo "------------------------------" >> MANIFEST.TXT
echo "  doc file(s)" >> MANIFEST.TXT
echo "------------------------------" >> MANIFEST.TXT
count=0
for entry in `pwd`/*.pdf
do
  pdfFilename=$(basename "$entry")
  echo "$pdfFilename" >> MANIFEST.TXT
  count=$((count + 1))
done
echo "MANIFEST.TXT" >>  MANIFEST.TXT

if [ $count -lt 1 ] ; then
  printf "${ANSI_RED}Expected at least one pdf file, found $count ${ANSI_RESET}\n"
  exit 1
fi

# create zip file

zip -r ${base_label}.zip MANIFEST.TXT ${jadeite_runtime_dirName} *.pdf Rowan 

# create sha256 file

sha256sum ${base_label}.zip > ${base_label}.sha256
sha256sum -c ${base_label}.sha256

printf "${ANSI_GREEN}Successful creation of ${base_label}.zip ${ANSI_RESET}\n"

