#!/usr/bin/env superdoit_stone
# Standard options are always present unless customoptions section is used
#
#options
#{
#  SuperDoitOptionalOptionWithNoArg long: 'help' short: 'h'.
#  SuperDoitOptionalOptionWithNoArg long: 'debug' short: 'D'.
#}
#%
# Example options section
#
#options
#{
#	SuperDoitOptionalOptionWithNoArg long: 'noarg' short: 'n'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o' default: 'blue'.
#	SuperDoitRequiredOptionWithRequiredArg long: 'required' short: 'r'.
#}
#%
#
options
{
	SuperDoitOptionalOptionWithRequiredArg long: 'rowanRoot' default: '$ROWAN_PROJECTS_HOME/Rowan'.
	SuperDoitOptionalOptionWithRequiredArg long: 'projectsHome' default: '$ROWAN_PROJECTS_HOME'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D] [-- [<stone-name> [<topaz-command-line-args>] ] ]

DESCRIPTION
  <put your description here>

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename --help
  $basename -h
  $basename --debug
  $basename -D
  $basename  
  $basename -- gs_360
  $basename -- gs_360 -T 100000
-----
%
instvars
rowanVersion
rowanProject
%
method
rowanProject
	^ rowanProject ifNil: [ rowanProject := Rowan projectNamed: 'Rowan' ]
%
method
gemstoneVersion
	^ (System gemVersionReport at: 'gsVersion') asRwGemStoneVersionNumber
%
method
rowanVersion
	^ rowanVersion
		ifNil: [ 
		rowanVersion := (Rowan respondsTo: #verion)
			ifTrue: [ Rowan version ]
			ifFalse: [
				| gemstoneVersion |
				gemstoneVersion := (System gemVersionReport at: 'gsVersion') asRwGemStoneVersionNumber. 
				gemstoneVersion = '3.6.0' asRwGemStoneVersionNumber
					ifTrue: [ RwSemanticVersionNumber fromString: '2.0.0' ]
					ifFalse: [ 
							gemstoneVersion = '3.6.1' asRwGemStoneVersionNumber
							ifTrue: [ RwSemanticVersionNumber fromString: '2.1.0' ]
					ifFalse: [  RwSemanticVersionNumber fromString: '2.2.0' ] ] ] ].
%
method
patchV200_MethodSource
^'resolveWithParentProject: aResolvedProject
	"give embedded projects a chance to resolve cleanly"

	self projectsHome: aResolvedProject projectsHome.
	^self  resolve'
%
method
patchV200
	RwLoadSpecificationV2 compileMethod: self patchV200_MethodSource.
%
method
upgradeFromV200_common
	"common code to upgrade from masterV2.0 to issue_660"
	| bootstrapRoot stream projectSet |
	self patchV200.
	bootstrapRoot := self rowanRoot asFileReference / 'platforms' / 'gemstone' / 'topaz' / 'bootstrap' / self gemstoneVersion printString.
	stream := WriteStream on: String new.
	stream 
		nextPutAll: 'set enableremoveall false'; lf.
	{'RowanV2.gs' . 'RowanV2_stubs.gs' . 'RowanV2_tonel.gs'} 
		do: [:gsFile |
			stream nextPutAll: 'input ', (bootstrapRoot / gsFile ) pathString; lf ].
	GsFileIn _fromStream: stream contents readStream.
%
method
upgradeFromV200_1
	"
		initial attempt --- having difficulty installing RowanClientServices on top of masterv2.2 ...
			hitting https://github.com/GemTalk/Rowan/issues/680 (Rowan-Services-Extensions package)
	"
	self upgradeFromV200_common.
	rowanProject load.
	Rowan projectTools load loadProjectNamed: rowanProject name 
%
method
upgradeFromV200_2
	"
		second try --- explicitly remove the Rowan Services packages (not needed for functionality
			and will be reloaded in RowanClientServices project when all is said and done
	"
	| defined |
	self upgradeFromV200_common.
	rowanProject load.
	defined := rowanProject defined.
	#( 'Rowan-Services-Core' 'Rowan-Services-CoreV2' 'Rowan-Services-Extensions' 'Rowan-JadeServer') 
		do: [:packageName | defined removePackageNamed: packageName ].
	defined load.
	Rowan projectTools load loadProjectNamed: rowanProject name 
%
doit
	self stdout 
		nextPutAll: 'Upgrading ', self rowanProject name,  ' v', self rowanVersion printString, ' to v2.2.0 [', self rowanProject loadedCommitId, ']';
		lf; tab;
		nextPutAll: 'Rown project root = ', self rowanRoot asFileReference pathString;
		lf; tab;
		nextPutAll: 'ROWAN_PROJECTS_HOME = ', self projectsHome asFileReference pathString; lf.
	Rowan projects do: [:project |
		project _loadedProject handle projectsHome: self projectsHome ]. 
	rowanProject gitRepositoryRoot: self rowanRoot.
	rowanVersion = '2.0.0' asRwSemanticVersionNumber
		ifTrue: [ self upgradeFromV200_2 ].
	^'Rowan upgraded [', rowanProject loadedCommitId, ']'
%
