#!/usr/bin/env superdoit_stone
# Standard options are always present unless customoptions section is used
#
#options
#{
#  SuperDoitOptionalOptionWithNoArg long: 'help' short: 'h'.
#  SuperDoitOptionalOptionWithNoArg long: 'debug' short: 'D'.
#}
#%
# Example options section
#
#options
#{
#	SuperDoitOptionalOptionWithNoArg long: 'noarg' short: 'n'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o' default: 'blue'.
#	SuperDoitRequiredOptionWithRequiredArg long: 'required' short: 'r'.
#}
#%
#
options
{
	SuperDoitOptionalOptionWithRequiredArg long: 'rowanRoot' default: '$ROWAN_PROJECTS_HOME/Rowan'.
	SuperDoitOptionalOptionWithRequiredArg long: 'projectsHome' default: '$ROWAN_PROJECTS_HOME'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D] [-- [<stone-name> [<topaz-command-line-args>] ] ]

DESCRIPTION
  <put your description here>

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename --help
  $basename -h
  $basename --debug
  $basename -D
  $basename  
  $basename -- gs_360
  $basename -- gs_360 -T 100000
-----
%
instvars
rowanVersion
rowanProject
originalProjectInfo
%
method
patchV200_MethodSource
"keep around in case it's needed"
^ {
	'category' -> 'source code'
	}
%
method
patchV200
"keep around in case it's needed"
false ifTrue: [ 
	RwLoadSpecificationV2 
		compileMethod: (self patchV200_MethodSource at: 1) value
			dictionaries: GsCurrentSession currentSession symbolList
			category: (self patchV200_MethodSource at: 1) key
			environmentId: 0.
]
%
method
rowanProject
	^ rowanProject ifNil: [ rowanProject := Rowan projectNamed: 'Rowan' ]
%
method
gemstoneVersion
	^ (System gemVersionReport at: 'gsVersion') asRwGemStoneVersionNumber
%
method
rowanVersion
	^ rowanVersion
		ifNil: [ 
		rowanVersion := (Rowan respondsTo: #verion)
			ifTrue: [ Rowan version ]
			ifFalse: [
				| gemstoneVersion |
				gemstoneVersion := (System gemVersionReport at: 'gsVersion') asRwGemStoneVersionNumber. 
				gemstoneVersion = '3.6.0' asRwGemStoneVersionNumber
					ifTrue: [ RwSemanticVersionNumber fromString: '2.0.0' ]
					ifFalse: [ 
							gemstoneVersion = '3.6.1' asRwGemStoneVersionNumber
							ifTrue: [ RwSemanticVersionNumber fromString: '2.1.0' ]
					ifFalse: [  RwSemanticVersionNumber fromString: '2.2.0' ] ] ] ].
%
method
createSymbolDictionaries
	| session symbolList |
	session := GsCurrentSession currentSession.
	symbolList := session symbolList.
	#( #RowanKernel #RowanLoader #RowanTools #RowanClientServices)
		do: [:symbolName | 
			| newDict size |
			RwGsImage 
				symbolDictNamed: symbolName
				ifAbsent: [ 
					newDict := SymbolDictionary new
						name: symbolName;
						objectSecurityPolicy: symbolList objectSecurityPolicy;
						yourself.
					size := System myUserProfile symbolList size.
					System myUserProfile insertDictionary: newDict at: size + 1 ] ].
  true
%
method
upgradeFromV200
	"
		disown everything .... bootstrap Rowan from .gs files ... adopt Rowan and then adopt other projects
	"
	| bootstrapRoot disownTool |
	originalProjectInfo := Dictionary new.
	disownTool := Rowan projectTools disown.
	Rowan projects do: [:project |
		originalProjectInfo 
			at: project name 
			put: 
				(Dictionary new
					at: 'repositoryRoot' put: project repositoryRootPath;
					yourself).
		disownTool disownProjectNamed: project name ].
	System commit.
false ifTrue: [ ^ self ].	"ALL Rowan metadata is removed from image"
	self createSymbolDictionaries.
	bootstrapRoot := self rowanRoot asFileReference / 'platforms' / 'gemstone' / 'topaz' / 'bootstrap' / self gemstoneVersion printString.
	{ 'RowanV2_stubs_boot.gs' . 'RowanV2.gs' . 'GemStone-Rowan.gs' . 'RowanV2_tonel.gs' . 'RowanV2_stubs.gs' } 
		do: [:gsFile |
			GsFileIn fromServerPath: (bootstrapRoot / gsFile) pathString ].
	System commit.
%
doit
	self stdout 
		nextPutAll: 'Upgrading ', self rowanProject name,  ' v', self rowanVersion printString, ' to v2.2.0 [', self rowanProject loadedCommitId, ']';
		lf; tab;
		nextPutAll: 'Rown project root = ', self rowanRoot asFileReference pathString;
		lf; tab;
		nextPutAll: 'ROWAN_PROJECTS_HOME = ', self projectsHome asFileReference pathString; lf.
	Rowan projects do: [:project |
		project _loadedProject handle projectsHome: self projectsHome ]. 
	rowanProject gitRepositoryRoot: self rowanRoot.
	rowanVersion = '2.0.0' asRwSemanticVersionNumber
		ifTrue: [ self upgradeFromV200 ].

true ifTrue: [ ^ 'disowned projects: ', originalProjectInfo keys asArray printString, '; bootstrapped projects from .gs files from ', self rowanRoot printString ].
	^'Rowan upgraded [', rowanProject loadedCommitId, ']'
%
