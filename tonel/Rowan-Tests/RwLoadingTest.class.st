"
No class-specific documentation for CypLoadingTest, hierarchy is: 
Object
  TestAsserter
    TestCase( testSelector)
      CypLoadingTest

"
Class {
	#name : 'RwLoadingTest',
	#superclass : 'TestCase',
	#category : 'Rowan-Tests'
}

{ #category : 'running' }
RwLoadingTest class >> debug [

	^self allTestSelectors do: [:selector | self debug: selector]
]

{ #category : 'running' }
RwLoadingTest class >> run [

	^self suite run
]

{ #category : 'support-definitionBuilding' }
RwLoadingTest >> accessorMethodsForSimpleClassNamed: name [

	| result |
	result := Dictionary new.
	
	{'iv1In' , name.
	'iv2In' , name} do: 
				[:ivName |
				result
					at: ivName asSymbol
						put: (RwMethodDefinition
								withProperties: (Dictionary with: 'selector' -> ivName asSymbol
										with: 'protocol' -> 'accessing')
								source: ivName , ' ^' , ivName);
					at: (ivName , ':') asSymbol
						put: (RwMethodDefinition
								withProperties: (Dictionary with: 'selector' -> (ivName , ':') asSymbol
										with: 'protocol' -> 'accessing')
								source: ivName , ': anObject ' , ivName , ' := anObject')].
	^result
]

{ #category : 'support' }
RwLoadingTest >> applyDiffToImage: aPackageSetModification [

	Rowan image applyModification: aPackageSetModification
]

{ #category : 'support' }
RwLoadingTest >> assertAbsenceOfPackage: packageName [

	| loadedPackage |
	loadedPackage := Rowan loadedPackageNamed: packageName ifAbsent: [nil].
	self assert: loadedPackage equals: nil
]

{ #category : 'support-definitionBuilding' }
RwLoadingTest >> definitionOfSimpleClassNamed: name inPackage: packageName [

	^RwClassDefinition
		withProperties: (self propertiesForSimpleClassNamed: name inPackage: packageName)
		classMethodDefinitions: (self sillyClassMethodsForClassNamed: name)
		instanceMethodDefinitions: (self accessorMethodsForSimpleClassNamed: name)
]

{ #category : 'support' }
RwLoadingTest >> definitionsOfLoadedPackages: packageNames [

	^(Rowan loadedPackagesNamed: packageNames) asDefinition
]

{ #category : 'subtests' }
RwLoadingTest >> loadInitialPackages [

	| packageNames myPackageSet imagePackageSet1 diff1 imagePackageSet2 diff2 |
	Rowan updateLoadedPackages.
	packageNames := #('TestPackage1' 'TestPackage2').
	packageNames do: [:name | self assertAbsenceOfPackage: name].
	imagePackageSet1 := self definitionsOfLoadedPackages: packageNames.
	myPackageSet := RwPackageSetDefinition new.
	myPackageSet
		addPackage: self package1Definition;
		addPackage: self package2Definition.
	diff1 := myPackageSet compareAgainstBase: imagePackageSet1.
	self deny: diff1 isEmpty.
	self applyDiffToImage: diff1.
	imagePackageSet2 := self definitionsOfLoadedPackages: packageNames.
	diff2 := myPackageSet compareAgainstBase: imagePackageSet2.
	self assert: diff2 isEmpty
]

{ #category : 'support-definitionBuilding' }
RwLoadingTest >> package1Definition [

	^RwPackageDefinition
		withProperties: (Dictionary with: 'name' -> 'TestPackage1')
		classDefinitions: (Dictionary
				with: 'TestClass1' -> (self definitionOfSimpleClassNamed: 'TestClass1' inPackage: 'TestPackage1'))
		classExtensions: Dictionary new
]

{ #category : 'support-definitionBuilding' }
RwLoadingTest >> package2Definition [

	^RwPackageDefinition
		withProperties: (Dictionary with: 'name' -> 'TestPackage2')
		classDefinitions: (Dictionary
				with: 'TestClass2' -> (self definitionOfSimpleClassNamed: 'TestClass2' inPackage: 'TestPackage2'))
		classExtensions: Dictionary new
]

{ #category : 'support-definitionBuilding' }
RwLoadingTest >> propertiesForSimpleClassNamed: className inPackage: packageName [

	| dict |
	dict := Dictionary new.
	dict
		at: 'category' put: packageName;
		at: 'classinstvars' put: Array new;
		at: 'classvars' put: Array new;
		at: 'comment'
			put: 'I am a class generated by Cypress tests. My name is ' , className
					, ', what''s yours?';
		at: 'gs_SymbolDictionary' put: 'CypressTestData';
		at: 'instvars'
			put: (Array with: 'iv1In' , className with: 'iv2In' , className);
		at: 'name' put: className;
		at: 'pools' put: Array new;
		at: 'super' put: 'Object';
		at: 'type' put: 'normal'.
	^dict
]

{ #category : 'support' }
RwLoadingTest >> setUp [

	"Remove the CypressTestData symbol dictionary, if present"

	| user symList dict index |
	user := System myUserProfile.
	symList := user symbolList.
	dict := symList objectNamed: #CypressTestData.
	dict
		ifNotNil: 
			[index := user symbolList indexOf: dict.
			index > 0 ifTrue: [user removeDictionaryAt: index]]
]

{ #category : 'support-definitionBuilding' }
RwLoadingTest >> sillyClassMethodsForClassNamed: name [

	^Dictionary
		with: #'sillyMessage' -> (RwMethodDefinition
						withProperties: (Dictionary with: 'selector' -> #'sillyMessage'
								with: 'protocol' -> 'silliness')
						source: 'sillyMessage
	^ ''You have sent a silly message to the class '' , name')
]

{ #category : 'tests' }
RwLoadingTest >> testLoading [

	self loadInitialPackages
]
