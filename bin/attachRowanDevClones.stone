#!/usr/bin/env superdoit_stone
options
{
	SuperDoitOptionalOptionWithRequiredArg long: 'archbase'.
	SuperDoitOptionalOptionWithRequiredArg long: 'projectsHome' default: '$ROWAN_PROJECTS_HOME'.
  SuperDoitOptionalOptionWithNoArg long: 'tests'.
  SuperDoitOptionalOptionWithNoArg long: 'gemstoneBaseImage'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D] [--tests] [--gemstoneBaseImage] \
                [-- [<stone-name> [<topaz-command-line-args>] ] ]

DESCRIPTION
  Attach the standard projects for extent0.rowan.dbf in the given stone to
  local git repositories. Using the currently defined values of 
  $ROWAN_PROJECTS_HOME and $ARCHBASE.

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

  --tests                    Install tests from the newly attached repositories
  --gemstoneBaseImage        Attach to the gemstone base image repository based
                             on the value of the $ARCHBASE env var.
%
method
attachGemstoneBaseImage
	(System gemEnvironmentVariable: 'ARCHBASE')
		ifNotNil: [
			| loadSpecs | 
			loadSpecs := (Rowan projectNamed: 'gemstoneBaseImage') loadedLoadSpecifications.
			loadSpecs do: [:loadSpec |
				loadSpec
					gitUrl: 'file:', ('$ARCHBASE/image' asFileReference pathString);
					projectsHome: '$ROWAN_PROJECTS_HOME';
					yourself ].
			loadSpecs load ].
%
method
attachRowanProjects
	| rowanProject loadSpecs |
	rowanProject := Rowan projectNamed: 'Rowan'.
	loadSpecs := rowanProject loadedLoadSpecifications.
	loadSpecs do: [:loadSpec |
		| relRoot |
		relRoot := loadSpec relativeRepositoryRoot.
		loadSpec specName = 'RowanClientServices'
			ifTrue: [
				relRoot isEmpty
					ifTrue: [ 
						loadSpec
							gitUrl: 'file:', (('$ROWAN_PROJECTS_HOME/RowanClientServices' asFileReference) pathString) ]
					ifFalse: [ 
						loadSpec
							gitUrl: 'file:', (('$ROWAN_PROJECTS_HOME/RowanClientServices' asFileReference / relRoot) pathString) ].
				loadSpec projectsHome: '$ROWAN_PROJECTS_HOME' ]
			ifFalse: [
				"embedded Rowan project" 
				relRoot isEmpty
					ifTrue: [ 
						loadSpec
							gitUrl: 'file:', (('$ROWAN_PROJECTS_HOME/Rowan' asFileReference) pathString) ]
					ifFalse: [ 
						loadSpec
							gitUrl: 'file:', (('$ROWAN_PROJECTS_HOME/Rowan' asFileReference / relRoot) pathString) ].
				loadSpec projectsHome: '$ROWAN_PROJECTS_HOME';
					yourself ].
		self tests ifTrue: [
			loadSpec addCustomConditionalAttributes: #('tests' 'testsV2')
		] ].
	loadSpecs load. 
%
doit
	self stdout 
		nextPutAll: '================='; lf;
		space; space; space; nextPutAll: self basename; lf;
		nextPutAll: '================='; lf;
		yourself.
	self archbase
		ifNotNil: [:value | System gemEnvironmentVariable: 'ARCHBASE' put: value asFileReference pathString ].
	System gemEnvironmentVariable: 'ROWAN_PROJECTS_HOME' put: self projectsHome asFileReference pathString.
	self attachRowanProjects.
	self gemstoneBaseImage
		ifTrue: [ self attachGemstoneBaseImage ].
	System commit.
	self stdout nextPutAll: '...finished :: ', self basename; lf.
	^ self noResult
%
