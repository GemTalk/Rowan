#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2018 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/dalehenrich/Rowan/blob/master/LICENSE
#=========================================================================

set -ex

#
# 1. clone the Rowan, Jade (Jadeite), RowanSample1, and RowanSample2 projects
# 2. confirm that the master branches of Rowan and Jade are on the correct tag
# 3. Create Jadeite runtime directory (Jadeite_runtime)
# 4. create MANIFEST.TXT and list the sha of the commit for each of the git 
#    projects along with the name of the file or directory
# 5. zip up the Rowan, RowanSample1, and RowanSample2 projects, the 
#    Jadeite_runtime directory  plus any .pdf documents present (only expect 
#     one PDF file)
# 6. Archive the zip file and stage for delivery
#
# Alpha1: $ROWAN_PROJECTS_HOME/Rowan/bin/packing v0.0.2-alpha Alpha1.0
# Alpha2: $ROWAN_PROJECTS_HOME/Rowan/bin/packing Edelweiss-Alpha2-CANDIOATE v0.0.3-alpha Alpha2.0 
#
ANSI_RED="\033[91;1m"
ANSI_GREEN="\033[92;1m"
ANSI_RESET="\033[0m"

base_label="$1"
if [ "$base_label"x = "x" ] ; then
  printf "${ANSI_RED}Missing required argument: base_label ${ANSI_RESET}\n"
  exit 1
fi
rowan_tag="$2"
jadeite_tag="$3"

commit_match_tag() {
  targetTag="$1"
  commit="$2"
  set e
  git describe --match "$targetTag" "$commit"
  result=$?
  set -e
  if [ "$result" != "0" ] ; then
    printf "${ANSI_RED} Error describing commit for $projectName ... expecting tag $targetTag -- not found ${ANSI_RESET}\n"
    exit 1
  fi
}
padded_manifest_line() {
  line='               |  '
  PROC_NAME="$1"
  printf "%s%s" $PROC_NAME "${line:${#PROC_NAME}}" >> MANIFEST.TXT
  PROC_NAME="$2"
  printf "%s%s" $PROC_NAME "${line:${#PROC_NAME}}" >> MANIFEST.TXT
  PROC_NAME="$3"
  printf "%s%s \n" $PROC_NAME "${line:${#PROC_NAME}}" >> MANIFEST.TXT
}
validate_tag() {
  projectName="$1"
  label="$2"
  tagName="$3"
  theTag=""
  pad=""
  if [ "$projectName" = "Rowan" ] ; then
    pad="	"
  fi
  pushd $projectName
    head="HEAD"		# tag is on current commit
    if [ "$projectName" = "Jade" ] ; then
      git fetch --tags
      head="HEAD~1"	#tag is on the previous commit for Jadeite"
    fi
    if [ "$tagName"x != "x" ] ; then
      git checkout master
      theTag=`commit_match_tag "$tagName" "$head"`
      if [ "${theTag}" != "${tagName}" ] ; then
        printf "${ANSI_RED} latest tag (${theTag}) for $projectName does not match expected tag (${tagName}) ${ANSI_RESET}\n"
        exit 1
      fi
    else
      theTag="-"
    fi
    theCommit=`git rev-parse --short HEAD`
  popd
  if [ "$projectName" != "Jade" ] ; then
    padded_manifest_line "$label" "$theTag" "$theCommit"
  fi
}
clone_entire_git_repo() {
  # clones the entire git repository including all branches
  url="$1"
  dir="$2"
  # mkdir $dir
  git clone --bare $url $dir/.git
  pushd $dir
  git config --bool core.bare false
  git checkout master
  popd
}

cd $ROWAN_PROJECTS_HOME/Rowan/packing

rm -rf Rowan Jade RowanSample1 RowanSample2 MANIFEST.TXT Jadeite_runtime_* *.zip

# Clone Rowan include all branches (complete copy of github repo)
clone_entire_git_repo git@github.com:dalehenrich/Rowan.git Rowan
# Clone Jade, avoid downloading old .exe files ... only need latest runtime dir
git clone --branch master --depth 2 git@github.com:ericwinger/Jade.git
# Clone entire RowanSample1 and RowanSample2 repos
clone_entire_git_repo git@github.com:dalehenrich/RowanSample1.git RowanSample1
clone_entire_git_repo git@github.com:dalehenrich/RowanSample2.git RowanSample2

# checkout sample branch in RowanSample1 and RowanSample2
pushd RowanSample1
  git checkout sample
popd
pushd RowanSample2
  git checkout sample
popd

echo "------------------------------" >> MANIFEST.TXT
echo "  Git clone directories" >> MANIFEST.TXT
echo "------------------------------" >> MANIFEST.TXT
padded_manifest_line "Git_Project" "Tag" "SHA"
echo "---------------|-----------------|-----------------|" >> MANIFEST.TXT
validate_tag Rowan Rowan "$rowan_tag"
validate_tag RowanSample1 RowanSample1
validate_tag RowanSample2 RowanSample2
validate_tag Jade Jade "$jadeite_tag"

# create Jadeite runtime directory
jadeite_runtime_dirName="Jadeite_runtime_${jadeite_tag}"
mkdir "$jadeite_runtime_dirName"
pushd Jade/runtime
  cp -r * ../../${jadeite_runtime_dirName}
popd

echo "" >> MANIFEST.TXT
echo "------------------------------" >> MANIFEST.TXT
echo "  Jadeite runtime directory" >> MANIFEST.TXT
echo "------------------------------" >> MANIFEST.TXT
echo "Jadeite_runtime_${jadeite_tag}" >> MANIFEST.TXT

echo "" >> MANIFEST.TXT
echo "------------------------------" >> MANIFEST.TXT
echo "  doc file(s)" >> MANIFEST.TXT
echo "------------------------------" >> MANIFEST.TXT
count=0
for entry in `pwd`/*.pdf
do
  pdfFilename=$(basename "$entry")
  echo "$pdfFilename" >> MANIFEST.TXT
  count=$((count + 1))
done
echo "MANIFEST.TXT" >>  MANIFEST.TXT

if [ $count -lt 1 ] ; then
  printf "${ANSI_RED}Expected at least one pdf file, found $count ${ANSI_RESET}\n"
  exit 1
fi

# create zip file

zip -r ${base_label}.zip MANIFEST.TXT ${jadeite_runtime_dirName} *.pdf Rowan RowanSample1 RowanSample2

printf "${ANSI_GREEN}Successful creation of ${base_label}.zip ${ANSI_RESET}\n"

