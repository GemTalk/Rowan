#!/usr/bin/env superdoit_stone
# Standard options are always present unless customoptions section is used
#
options
{
	SuperDoitOptionalOptionWithNoArg long: 'installRowan'.
	SuperDoitOptionalOptionWithNoArg long: 'commit'.
	SuperDoitOptionalOptionWithNoArg long: 'audit'.
	SuperDoitOptionalOptionWithNoArg long: 'customerRepair'.
	SuperDoitOptionalOptionWithNoArg long: 'rowanRepair'.
	SuperDoitOptionalOptionWithNoArg long: 'skip'.
	SuperDoitOptionalOptionWithNoArg long: 'customerReload'.
	SuperDoitOptionalOptionWithNoArg long: 'rowanReload'.
	SuperDoitOptionalOptionWithNoArg long: 'persistIt'.
}
%
usage
-----
USAGE
  # with GS_HOME set (<stone-name> optional if run in $GS_HOME/servers/stones/<stone-name> directory)
  $basename [--help | -h] [--debug | -D] [-- [<stone-name> [<topaz-command-line-args>] ] ]
  # with GEMSTONE set
  $basename [--help | -h] [--debug | -D] -- ([-r] | -l | -L) -I <path-to-.topazini> [<topaz-command-line-args>]

DESCRIPTION
	During upgradeImage, all methods for kernel classes are removed, without
		updating the Rowan metadata. So we basically need to restore the Rowan
		extension for kernel classes, repair the Rowan meta data, repair the metadata
		for the non-Rowan (customer) projects, and reload the Rowan and customer
		projects to pick up the platform-specific changes.

	It is expected that all current Rowan projects passed a project audit prior to
		the upgrade.

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename --help                           -- gs_351             # with GS_HOME set
  $basename -h                               -- -l -I ./.topazini  # with GEMSTONE set
  $basename --help
  $basename -D <script-arguments>            <topaz-arguments>
  $basename --debug <script-arguments>       <topaz-arguments>
  $basename <script-arguments>               <topaz-arguments>

  $basename -D --installRowan --commit
  $basename -D --rowanRepair --skip --commit
  $basename -D --rowanRepair                    # expected to run clean before reload
  $basename -D --customerRepair --skip --commit
  $basename -D --customerRepair                 # expected to run clean before reload
  $basename -D --rowanReload --commit
  $basename -D --customerReload --commit
  $basename -D --audit                          # audit all projects ... run clean
-----
%
input
$GEMSTONE/rowan/upgrade/v12/UpgradeRowanV12.gs
%
doit
	| rowanClass upgrader |
	rowanClass := (self globalNamed: 'Rowan' ifAbsent: [])
		ifNil: [ self error: 'Rowan not present in image. No Rowan upgrade performed.' ].
	(rowanClass respondsTo: #versionString)
		ifFalse: [
			"assume 3.2.15 to 3.5.7 to 3.6.4 upgrade sequence for Rowan v1.2.10"
			(System gemEnvironmentVariable: 'ROWAN_PROJECTS_HOME') ifNil: [ self error: 'Required env var ROWAN_PROJECTS_HOME is not defined' ].
			GsFileIn fromServerPath: '$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/upgrade_32x_to_36x/installRowan.gs'.
			GsFileIn fromServerPath: '$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/upgrade_32x_to_36x/RowanV2.gs'.
			GsFileIn fromServerPath: '$ROWAN_PROJECTS_HOME/Rowan/platforms/gemstone/topaz/upgrade_32x_to_36x/adoptRowan.gs'.
 			^ 'success' ].
	((self globalNamed: 'RwSemanticVersionNumber') fromString: rowanClass versionString)
		>= ((self globalNamed: 'RwSemanticVersionNumber') fromString: '1.2.13')
		ifFalse: [
			self
				error:
					'Upgrade for Rowan v' , rowanClass versionString
						, ' is not supported. No Rowan upgrade performed.' ].
	upgrader := (self globalNamed: 'UpgradeRowanV12') new.
	upgrader shouldCommit: self commit.
	self installRowan
		ifTrue: [ upgrader step_1_installRowan ].
	self rowanRepair
		ifTrue: [ upgrader step_2_repairRowanAuditFailures ].
	self customerRepair
		ifTrue: [ upgrader step_3_repairCustomerAuditFailures ].
	self rowanReload
		ifTrue: [ upgrader step_4_reloadRowan ].
	self customerReload
		ifTrue: [ upgrader step_5_reloadCustomer ].
	self audit
		ifTrue: [ upgrader step_6_finalAudit ].
	^ 'success'
%
