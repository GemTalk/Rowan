#!/usr/bin/env superdoit_stone
options
{
	SuperDoitRequiredOptionWithRequiredArg long: 'upgradeFrom'.

	SuperDoitOptionalOptionWithNoArg long: 'commit'.
	SuperDoitOptionalOptionWithNoArg long: 'audit'.
	SuperDoitOptionalOptionWithNoArg long: 'customerReload'.
	SuperDoitOptionalOptionWithNoArg long: 'customerRepair'.
	SuperDoitOptionalOptionWithNoArg long: 'gemstoneBaseReload'.
	SuperDoitOptionalOptionWithNoArg long: 'gemstoneBaseRepair'.
	SuperDoitOptionalOptionWithNoArg long: 'rowanReload'.
	SuperDoitOptionalOptionWithNoArg long: 'rowanRepair'.
	SuperDoitOptionalOptionWithNoArg long: 'skip'.
}
%
usage
-----
USAGE
  $basename [--help | -h] [--debug | -D] --upgradeFrom=<original-gemstone-version> <OPTIONS>

DESCRIPTION
	During upgradeImage, all methods for kernel classes are removed, without
		updating the Rowan metadata. So we basically need to restore the Rowan
		extension for kernel classes, repair the Rowan meta data, repair the metadata
		for the non-Rowan (customer) projects, and reload the Rowan and customer
		projects to pick up the platform-specific changes.

	It is expected that all current Rowan projects passed a project audit prior to
		the upgrade.

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename --help                           -- gs_351             # with GS_HOME set
  $basename -h                               -- -l -I ./.topazini  # with GEMSTONE set
  $basename --help
  $basename -D <script-arguments>            <topaz-arguments>
  $basename --debug <script-arguments>       <topaz-arguments>
  $basename <script-arguments>               <topaz-arguments>

  $basename --upgradeFrom=3.6.3  --commit --rowanRepair --rowanReload \
            --gemstoneBaseRepair --gemstoneBaseReload --customerRepair \
            --customerReload --audit
-----
%
input
	$GEMSTONE/projects/Rowan/upgrade/UpgradeRowanV2.gs
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'RowanUpgrade',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'UpgradeRowan'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
}
]
%
doit
	| rowanClass upgrader originalRowanVersion |
	rowanClass := (self globalNamed: 'Rowan' ifAbsent: [])
		ifNil: [ self error: 'Rowan not present in image. No Rowan upgrade performed.' ].
	(rowanClass respondsTo: #versionString)
		ifFalse: [ 
			"Rowan version older than Rowan v2.3.0"
			self error: 'Rowan version must be at least v2.3.0 to finish upgrade. Use $GEMSTONE/rowan/bin/updateRowan.stone to upgrade Rowan prior to running this script' ].
	(originalRowanVersion := (self globalNamed: 'RwSemanticVersionNumber') fromString: rowanClass versionString)
			>= ((self globalNamed: 'RwSemanticVersionNumber') fromString: '2.3.0')
		ifFalse: [
			self
				error:
					'Upgrade for Rowan v' , rowanClass versionString
						, ' is not supported. No Rowan upgrade performed.' ].
	self preDoitSpecLoad: [:loadSpec |
		"we don't want the UpgradeRowan project to persisted in the image ... load into transient
			symbol dictionary"
		loadSpec 
			projectsHome: '$GEMSTONE/projects/Rowan/upgrade/projectsHome';
			gemstoneSetDefaultSymbolDictNameTo: SuperDoitCommandParser transientSymbolDictionaryName;
			yourself ].
	Rowan projectTools disown disownProjectNamed: 'RowanUpgrade'. "remove Rowan metadata and leave class in transient symbol dict"

	upgrader := (self globalNamed: 'UpgradeRowanV2') new.
	upgrader
		upgradeFrom: self upgradeFrom;
		originalRowanVersion: originalRowanVersion;
		shouldCommit: self commit.
	self rowanRepair
		ifTrue: [ upgrader step_1_repairRowanAuditFailures ].
	self gemstoneBaseRepair
		ifTrue: [ upgrader step_2_repairGemstoneBaseAuditFailures ].
	self customerRepair
		ifTrue: [ upgrader step_3_repairCustomerAuditFailures ].
	self rowanReload
		ifTrue: [ upgrader step_4_reloadRowan ].
	self gemstoneBaseReload
		ifTrue: [ upgrader step_5_reloadGemstoneBase ].
	self customerReload
		ifTrue: [ upgrader step_6_reloadCustomer ].
	self audit
		ifTrue: [ upgrader step_7_finalAudit ].
	^ 'success'
%
