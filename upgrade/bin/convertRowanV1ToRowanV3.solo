#!/usr/bin/env superdoit_solo
options
{
	SuperDoitRequiredOptionWithRequiredArg long: 'rowanRoot'.
	SuperDoitRequiredOptionWithRequiredArg long: 'projectRootPath'.
	SuperDoitRequiredOptionWithRequiredArg long: 'specPath'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D]

DESCRIPTION
  <put your description here>

OPTIONS
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  obasename --help
  $basename -D
  $basename  --rowanRoot=/home/dhenrich/work/m_37x_externals_st/Rowan \
             --projectRootPath=/home/dhenrich/_homes/rogue/_home/shared/repos/Plantis \
             --specPath=/home/dhenrich/_homes/rogue/_home/shared/repos/Plantis/rowan/specs/Plantis.ston
  $basename  --rowanRoot=/home/dhenrich/work/m_37x_externals_st/Rowan \
             --projectRootPath=/home/dhenrich/junk/Rowan \
             --specPath=/home/dhenrich/junk/Rowan/rowan/specs/Rowan.ston
  $basename  --rowanRoot=/home/dhenrich/work/m_37x_externals_st/Rowan \
             --projectRootPath=/home/dhenrich/_homes/rogue/_home/server/stones/dbo_anon_3215/git/dbo_anon/Project_DBOMain \
             --specPath=/home/dhenrich/_homes/rogue/_home/server/stones/dbo_anon_3215/git/dbo_anon/Project_DBOMain/rowan/specs/Project_DBOMain.ston
-----
%
instvars
platformAttributes
packageMapSpecs
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'RowanV12Metadata',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'UserGlobals'
			}
		}
	},
	#comment : ''
}]
%
method
readProjectSpecification: specPath
	specPath asFileReference readStreamDo: [:stream |
		| bufferedStream |
		bufferedStream := ZnBufferedReadStream on:  stream.
		^ STON fromStream: bufferedStream ].
%
method
resolveProjectSpecification
	| projectSpec configurationNames groupNames configDirectory res visitor |
	projectSpec := self readProjectSpecification: self specPath.
"RwPrjReadTool>>readConfigurationsForProjectDefinition:withConfigurations:groupNames:"
	configurationNames := projectSpec loadedConfigurationNames.
	(configurationNames isNil or: [ configurationNames isEmpty ])
		ifTrue: [ configurationNames := projectSpec defaultConfigurationNames ].
	configurationNames ifNil: [ self halt: 'read all package names' ].
	groupNames := projectSpec defaultGroupNames.
"RwPrjReadTool>>_visitConfigurations:forProjectDefinition:withConfigurations:groupNames:"
	configDirectory := self projectRootPath  , '/' , projectSpec configsPath , '/'.
	visitor := (Rowan globalNamed: 'RwProjectLoadConfigurationVisitor') new
		platformAttributes: Rowan platformConditionalAttributes;
		groupNames: groupNames;
		configurationBasePath: configDirectory;
		yourself.
	configurationNames do: [:configName |
		| config |
		config := (Rowan globalNamed: 'RwAbstractProjectConfiguration') _readStonFrom: ( configDirectory, configName , '.ston') asFileReference readStream.
		visitor visit: config ].

	res := { 
			configurationNames . 
			groupNames . 
			visitor packageNames asArray.
			visitor packageMapSpecs .
		}.
	^ res
%
method
loadV12Metadata
	self preDoitSpecLoad: [:spec |
		spec projectsHome: self rowanRoot, '/upgrade/projectsHome'
	].
%
method
createBasicV3ProjectFor: projectRootPath from: v12ProjectSpec
	| definedProject rootRef url |
	rootRef := projectRootPath asFileReference.
	definedProject := (Rowan newProjectNamed: rootRef basename)
		projectsHome: rootRef parent;
		packagesPath: v12ProjectSpec repoPath;
		componentsPath: 'rowanv3/components';
		projectsPath: 'rowanv3/projects';
		specsPath: 'rowanv3/specs';
		projectSpecPath: 'rowanv3';
		projectSpecFile: 'rowanv3/projects.ston';
		packageConvention: 'Rowan';
		specName: v12ProjectSpec specName
		yourself.
	url := 'file:', projectRootPath.
	v12ProjectSpec useGit
		ifTrue: [ definedProject gitUrl: url ]
		ifFalse: [ definedProject diskUrl: url ].
	^ definedProject
%
method
createV3ComponentsFrom: configDict in: v3DefinedProject for: v12ProjectSpec
	| v1TopLevelConfigClass |
	UserGlobals at: #'USE_NEW_COMPONENT_CLASSES' put: true.	"active v3 components"
	v1TopLevelConfigClass := Rowan globalNamed: 'RwProjectLoadConfiguration'.
	(configDict values select: [:each | each isKindOf: v1TopLevelConfigClass ])
		do: [:config |
			| theComponent |
			config conditionalPackages keysAndValuesDo: [:platformPatterns :groupMap |
				| condition |
				platformPatterns size > 1
					ifTrue: [ self error: 'multi-entry platformPatterns in ', config name printString, ' not implemented: ', platformPatterns printString ].
				condition := platformPatterns first.
				theComponent := condition = 'common'
					ifTrue: [
						v3DefinedProject addLoadComponentNamed: config name comment: config comment ]
					ifFalse: [ 
						v3DefinedProject 
							addLoadComponentNamed: config name 
							comment: config comment.
						v3DefinedProject 
							addPlatformSubcomponentNamed: condition, '/', config name 
							condition: { condition }
							toComponentNamed: config name ].
				groupMap keysAndValuesDo: [:groupName :map |
					(map at: #packageNames ifAbsent: [ ])
						ifNotNil: [:packageNames |
							theComponent addPackageNames: packageNames ] ] ] ]
%
doit
	| v12ProjectSpec configs v3DefinedProject v3ResolvedProject |
	self loadV12Metadata.
"
		""DEBUGGING - extract list of package names by reading/resolving the loadSpec""
		^ self resolveProjectSpecification
"
	"read project spec from disk"
	v12ProjectSpec := self readProjectSpecification: self specPath.
	"create a Rowan v3 project xfer relevant information from v12ProjectSpec"
	v3DefinedProject := self createBasicV3ProjectFor: self projectRootPath from: v12ProjectSpec.
	"read configurations and generate Rowan v3 components"
	configs := Dictionary new.
	(self projectRootPath, '/', v12ProjectSpec configsPath) asFileReference files do: [:confRef |
		confRef extension = 'ston'
			ifTrue: [ 
				| config |
				config := confRef 
					readStreamDo: [:fileStream | 
						| stream |
						stream := ZnBufferedReadStream on: fileStream. "wrap with buffered stream to bypass https://github.com/GemTalk/FileSystemGs/issues/9"
						stream sizeBufferPatch9: confRef size.
						(Rowan globalNamed: 'RwAbstractProjectConfiguration') _readStonFrom: stream ].
				configs at: config name put: config ] ].
	self createV3ComponentsFrom: configs in: v3DefinedProject for: v12ProjectSpec.
	v3ResolvedProject := v3DefinedProject resolveProject.
	v3ResolvedProject 
		export;
		exportLoadSpecification;
		yourself.
	^ {
			v12ProjectSpec .
			configs .
			v3DefinedProject .
		}

%
