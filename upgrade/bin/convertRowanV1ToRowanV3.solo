#!/usr/bin/env superdoit_solo
options
{
	SuperDoitRequiredOptionWithRequiredArg long: 'rowanRoot'.
	SuperDoitRequiredOptionWithRequiredArg long: 'projectRootPath'.
	SuperDoitRequiredOptionWithRequiredArg long: 'specPath'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D]

DESCRIPTION
  <put your description here>

OPTIONS
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  obasename --help
  $basename -D
  $basename  --rowanRoot=/home/dhenrich/work/m_37x_externals_st/Rowan \
             --projectRootPath=/home/dhenrich/_homes/rogue/_home/shared/repos/Plantis \
             --specPath=/home/dhenrich/_homes/rogue/_home/shared/repos/Plantis/rowan/specs/Plantis.ston
  $basename  --rowanRoot=/home/dhenrich/work/m_37x_externals_st/Rowan \
             --projectRootPath=/home/dhenrich/junk/Rowan \
             --specPath=/home/dhenrich/junk/Rowan/rowan/specs/Rowan.ston
  $basename  --rowanRoot=/home/dhenrich/work/m_37x_externals_st/Rowan \
             --projectRootPath=/home/dhenrich/_homes/rogue/_home/server/stones/dbo_anon_3215/git/dbo_anon/Project_DBOMain \
             --specPath=/home/dhenrich/_homes/rogue/_home/server/stones/dbo_anon_3215/git/dbo_anon/Project_DBOMain/rowan/specs/Project_DBOMain.ston
-----
%
instvars
platformAttributes
packageMapSpecs
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'RowanV12Metadata',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'UserGlobals'
			}
		}
	},
	#comment : ''
}]
%
method
readProjectSpecification: specPath
	specPath asFileReference readStreamDo: [:stream |
		| bufferedStream |
		bufferedStream := ZnBufferedReadStream on:  stream.
		^ STON fromStream: bufferedStream ].
%
method
loadV12Metadata
	self preDoitSpecLoad: [:spec |
		spec projectsHome: self rowanRoot, '/upgrade/projectsHome'
	].
%
doit
	| projectSpec configurationNames groupNames configDirectory projectLoadConfigs res visitor projectName |
	self loadV12Metadata.
	projectSpec := self readProjectSpecification: self specPath.
"RwPrjReadTool>>readConfigurationsForProjectDefinition:withConfigurations:groupNames:"
	configurationNames := projectSpec loadedConfigurationNames.
	(configurationNames isNil or: [ configurationNames isEmpty ])
		ifTrue: [ configurationNames := projectSpec defaultConfigurationNames ].
	configurationNames ifNil: [ self halt: 'read all package names' ].
	groupNames := projectSpec defaultGroupNames.
"RwPrjReadTool>>_visitConfigurations:forProjectDefinition:withConfigurations:groupNames:"
	configDirectory := self projectRootPath  , '/' , projectSpec configsPath , '/'.
	visitor := (Rowan globalNamed: 'RwProjectLoadConfigurationVisitor') new
		platformAttributes: Rowan platformConditionalAttributes;
		groupNames: groupNames;
		configurationBasePath: configDirectory;
		yourself.
	configurationNames do: [:configName |
		| config |
		config := (Rowan globalNamed: 'RwAbstractProjectConfiguration') _readStonFrom: ( configDirectory, configName , '.ston') asFileReference readStream.
		config projectName: projectName.
		visitor visit: config ].

	res := { 
			configurationNames . 
			groupNames . 
			visitor packageNames asArray.
			visitor packageMapSpecs .
		}.
	^ res
"
	^ self noResult
"
%
