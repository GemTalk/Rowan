#!/usr/bin/env superdoit_solo
options
{
  SuperDoitOptionalOptionWithRequiredArg long: 'projectsHome' default: '$ROWAN_PROJECTS_HOME'.
}
%
usage
-----
USAGE
  $basename [--help | -h] [--debug | -D] --projectsHome=<Rowan-project-parent-directory>

DESCRIPTION
	Generate the UpgradeRowanV2.gs file. The file contains the GemStone kernel
  class extension methods used to bootstrap Rowan V2.2 into an image after
  upgradeImage has been run.

OPTIONS
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error
  --projectsHome=<Rowan-project-parent-directory>
                             The parent of the Rowan project.

EXAMPLES
  $basename --help
  $basename -D
-----
%
doit
	| loadSpecUrl loadSpec theProjectSetDefinition theRepositoryRoot topazFileNameMap 
		projectSetModification visitor resolvedProject customConditionalAttributes 
		gsFileName theGsFile projectDefinition thePackages |
	loadSpecUrl := 'file:', self projectsHome, '/Rowan/rowan/specs/Rowan.ston'.
	loadSpec := RwSpecification fromUrl: loadSpecUrl.
	customConditionalAttributes := {
		'common'.
		'gemstone'.
		'gemstone-kernel'.
		'upgrade' .
		'3.7.0' asRwGemStoneVersionNumber.	"want to read 3.7.0 packages"
	}.
	loadSpec 
		customConditionalAttributes: customConditionalAttributes;
		componentNames: { 'Upgrade' };
		yourself.
	theRepositoryRoot := (self projectsHome, '/Rowan/upgrade') asFileReference.
	theRepositoryRoot ensureCreateDirectory.
	resolvedProject := loadSpec
			projectsHome: self projectsHome;
			resolve.

	theProjectSetDefinition :=  resolvedProject readProjectSet: customConditionalAttributes.
	
	gsFileName := 'UpgradeRowanV2'.
	topazFileNameMap := Dictionary new
		at: gsFileName put: Set new;
		yourself.
	GsFile gciLogServer: 'Creating UpgradeRowanV2.gs:'.
	projectDefinition := theProjectSetDefinition projectNamed: 'Rowan'.
	thePackages := projectDefinition packageNames.
	thePackages do: [:packageName |
		(topazFileNameMap at: gsFileName) add: packageName.
		GsFile gciLogServer: '	', packageName ].

	projectSetModification := theProjectSetDefinition compareAgainstBase: RwProjectSetDefinition new.
	visitor := RwGsModificationTopazWriterVisitorV2 new
		repositoryRootPath: theRepositoryRoot;
		topazFilenamePackageNamesMap: topazFileNameMap;
		topazFileHeader: '! ', self _copyright, String new lf; 
		yourself.
	visitor visit: projectSetModification.
	theGsFile := GsFile openAppendOnServer: (theRepositoryRoot / gsFileName, 'gs') pathString.
	[ 
		"seems that a commit is needed at end of .gs file?"
		theGsFile lf; nextPutAll: 'commit'; lf ] ensure: [ theGsFile close ].
	^ self noResult
%
