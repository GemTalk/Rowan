<?xml version="1.0"?><st-source><!-- Name: CypressDifferencingToolsComment: CypressDifferencingTools is a package providing a number of services related to managing packages and viewing differences in server code.These services include: - facility for saving packages to disk - facility for finding and loading packages from disk (future!) - facility for viewing the differences between packages and their saved disk representation - facility for ensuring code has not be mis-categorized into an invalid packageServer pre-requisite packages:Cypress-ComparisonCypress-GemStoneFileServerCypress-StructureCypress-DefinitionsDevelopmentPrerequisites: #(#(#any 'GbxDifferencingTools' '') #(#any 'GbsRuntime' '') #(#any 'GbsTools' ''))PackageName: CypressDifferencingToolsParcel: #('CypressDifferencingTools')ParcelDirectory: CypressDifferencingToolsPrerequisiteDescriptions: #(#(#name 'GbxDifferencingTools' #componentType #package) #(#name 'GbsRuntime' #componentType #bundle) #(#name 'GbsTools' #componentType #bundle))PrerequisiteParcels: #(#('GbxDifferencingTools' '') #('GbsRuntime' '') #('GbsTools' ''))Version: 8Date: 12:55:52 PM September 28, 2013 --><time-stamp>From VisualWorksÂ®, 7.9.1 of October 18, 2012 on September 28, 2013 at 12:55:52 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>CypressPackageManagerView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>managerDelegate packagesTable packagesSelectionInTable currentSelection conflictedFilter knownPackagesFilter extensionsFilter unknownFilter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CypressDifferencingTools</package></attributes></class><comment><class-id>CypressPackageManagerView</class-id><body>CypressPackageManagerView provides a user interface for managing Cypress packages under GemStone.Features: - save selected package to disk - save all packages with changes to disk - compare what's in the image for a selected package to what's on disk - compare all packages with changes against their previously saved disk representations - verify correct categorization of code when a conflicting package name is present (see CypressPackageInformation for details on conflicting package name) - specify the directory where a package should be saved to disk - associate already loaded packages with the directory on disk where they are found - filter what kinds of potential and actual packages are shown (known, unknown, conflicted, and extensions) - display the number of class and method definitions in packagesInstance Variables	currentSelection	&lt;CypressPackageInformation&gt;	currently selected Package Information object or nil if none selected	managerDelegate	&lt;GbxDelegate&gt;	Delegate to the server CypressPackageManager instance	packagesSelectionInTable	&lt;SelectionInTable&gt;	SelectionInTable model for the list of Package Information objects	packagesTable	&lt;TableInterface&gt;	the displayed list of Package Information objects	conflictedFilter	&lt;ValueModel&gt;	Boolean controlling whether to show(true) or hide(false) Conflicted package names	extensionsFilter	&lt;ValueModel&gt;	Boolean controlling whether to show(true) or hide(false) Qualified package names	knownPackagesFilter	&lt;ValueModel&gt;	Boolean controlling whether to show(true) or hide(false) package names for Known Packages	unknownFilter	&lt;ValueModel&gt;	Boolean controlling whether to show(true) or hide(false) package names not otherwise known</body></comment><class><name>GemStoneDirectorySearcher</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>directoryStacks currentDirectoryListing currentDirectorySpec matchingSelections </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CypressDifferencingTools</package></attributes></class><comment><class-id>GemStoneDirectorySearcher</class-id><body>| dialog |dialog := IncrementalSearchDialog forSelectionWithSearch: (GemStoneDirectorySearcher new)."dialog module pasteSelected: true."dialog entry: '/opt/'.dialog select</body></comment><class><name>CypressPackageInformation</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type advice competingPackageNames savedLocation repositoryDescription imageCounts changesCount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CypressDifferencingTools</package></attributes></class><comment><class-id>CypressPackageInformation</class-id><body>CypressPackageInformation documents potential and actual packages for the Cypress Package Manager. Candidate package names come from class categories and from method categories beginning with an asterisk. Category names may contain more information than just the package name, such as logical subdivisions within a package or method categorization in addition to the package name. For example, a Package might be named X or Y-Z or whatever. Classes could be categorized as X, Y-Z, X-A, or Y-Z-A, and methods could be categorized as *X, *Y-Z, *X-A, *Y-Z-A, etc. (The various letters X, Y, Z, and A can represent almost any sequence of characters, in either uppercase, lowercase, or both. Package names are case-insensitive.)There are four types of CypressPackageInformation objects: - Known Package - those which are known to represent real packages (e.g., Y-Z). In general, it is because there is a savedLocation specified. - Qualified Name - the name is a Known Package name qualified by further details, and cannot be used to represent a Known Package (e.g., X-accessing). - Conflicted Name - the name is a prefix of a Known Package name (e.g. given a Known Package named Y-Z, there can be no package named Y). - Unknown - the name could represent a package, but it is not known to do so.Instance Variables	advice	&lt;String&gt;	Additional information about the type of the instance, usually used only for Qualified Names and Conflcited Names.	changesCount	&lt;Integer&gt;	The number of differences between the in-image definitions of the package and the definitions previously saved to disk.	competingPackageNames	&lt;String&gt;*	0 or more strings naming packages in competition with this one.	imageCounts	&lt;Integer pair&gt;	The number of classes and the number of methods in the image for the package.	name	&lt;String&gt;	The name of the package or potential package.	savedLocation	&lt;String&gt;	The path to the directory in which the package was or should be saved, with a trailing slash (e.g., /usr/src/project/).	type	&lt;String&gt;	One of 'Known Package', 'Qualified Name', 'Conflicted Name', and 'Unknown'.</body></comment><methods><class-id>CypressPackageManagerView</class-id> <category>initializing - private</category><body package="CypressDifferencingTools">createManagerDelegate	^GBSM currentSession execute: 'CypressPackageManager new'</body><body package="CypressDifferencingTools">initialize	super initialize.	self		initializeManagerDelegate;		initializePackagesTable</body><body package="CypressDifferencingTools">initializeManagerDelegate	managerDelegate := self createManagerDelegate</body><body package="CypressDifferencingTools">initializePackagesTable	packagesSelectionInTable := SelectionInTable with: (TableAdaptor						adaptors: (RowAdaptor adaptForAspects: #(#name #status #description))).	packagesSelectionInTable selectionIndexHolder 		onChangeSend: #handleChangedSelection 		to: self. 	packagesTable := (TableInterface new)				selectionInTable: packagesSelectionInTable;				columnLabelsArray: #('Package Name' 'Definitions' 'Repository');				columnWidths: self defaultColumnWidths;				elementFormats: #(#left #centered #left);				columnLabelsFormats: #(#centered);				rowHeights: #(1);				yourself</body></methods><methods><class-id>CypressPackageManagerView</class-id> <category>accessing - private</category><body package="CypressDifferencingTools">currentSelectedPackageInformation	^packagesSelectionInTable selectionIndex y = 0		ifTrue: [nil]		ifFalse: 			[packagesSelectionInTable list				at: packagesSelectionInTable selectionIndex y]</body><body package="CypressDifferencingTools">defaultColumnWidths	^#(150 70 200)</body><body package="CypressDifferencingTools">packagesTable	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^packagesTable</body><body package="CypressDifferencingTools">packagesWithChanges	^self possiblePackagesList select: [:each | each hasChanges]</body><body package="CypressDifferencingTools">possiblePackagesList	^packagesSelectionInTable list</body><body package="CypressDifferencingTools">preferredServerPath	"Assume that a path further from the root is 'preferred'."	| knownPaths |	knownPaths := self possiblePackagesList inject: (Set with: '')				into: 					[:directories :each |					directories						add: each savedLocation;						yourself].	knownPaths := knownPaths asSortedCollection: [:a :b | a size &gt; b size].	^knownPaths first</body></methods><methods><class-id>CypressPackageManagerView</class-id> <category>server execution - private</category><body package="CypressDifferencingTools">compareDefinitionsFromConflictedPackageInformation: aCypressPackageInformation	^self serverCall: #compareDefinitionsFromConflictedPackageInformation: with: aCypressPackageInformation</body><body package="CypressDifferencingTools">comparePackageFrom: aCypressPackageInformation	^self serverCall: #comparePackageFrom: with: aCypressPackageInformation</body><body package="CypressDifferencingTools">comparePackagesFrom: someCypressPackageInformations	^self serverCall: #comparePackagesFrom: with: someCypressPackageInformations</body><body package="CypressDifferencingTools">loadPackageFrom: aCypressPackageInformation	^self serverCall: #loadPackageFrom: with: aCypressPackageInformation</body><body package="CypressDifferencingTools">lookForLoadedPackagesIn: aDirectory	^self serverCall: #lookForLoadedPackagesIn: with: aDirectory</body><body package="CypressDifferencingTools">lookForUnloadedPackagesIn: aDirectory	^self serverCall: #lookForUnloadedPackagesIn: with: aDirectory</body><body package="CypressDifferencingTools">packageInformationList	^self serverCall: #refreshedPackageInformationList</body><body package="CypressDifferencingTools">serverCall: aSelector	^managerDelegate performOnGsServer: aSelector</body><body package="CypressDifferencingTools">serverCall: aSelector with: anObject	^managerDelegate performOnGsServer: aSelector withArguments: (Array with: anObject)</body><body package="CypressDifferencingTools">serverCall: aSelector with: anObject with: anotherObject	^managerDelegate performOnGsServer: aSelector withArguments: (Array with: anObject with: anotherObject)</body><body package="CypressDifferencingTools">updateSavedLocation: aDirectory for: aCypressPackageInformation	^self serverCall: #updateSavedLocation:for: with: aDirectory with: aCypressPackageInformation</body><body package="CypressDifferencingTools">writePackageToDiskFrom: aCypressPackageInformation	aCypressPackageInformation savedLocation isEmpty		ifTrue: 			[self handleSetPackageLocationActionButtonPressed.			aCypressPackageInformation savedLocation isEmpty ifTrue: [^self]].	^self serverCall: #writePackageToDiskFrom: with: aCypressPackageInformation</body><body package="CypressDifferencingTools">writePackagesToDiskFrom: someCypressPackageInformations	^self serverCall: #writePackagesToDiskFrom: with: someCypressPackageInformations</body></methods><methods><class-id>CypressPackageManagerView</class-id> <category>event handling - private</category><body package="CypressDifferencingTools">distribute: changedWidth over: someWidths	| total |	changedWidth &lt;= 0 ifTrue: [^someWidths].	total := someWidths inject: 0 into: [:sum :each | sum + each].	^someWidths collect: [:each | each * changedWidth // total + each]</body><body package="CypressDifferencingTools">filteredPackageInformationList	^self packageInformationList select: 			[:each |			(each isKnown and: [knownPackagesFilter value])				or: [(each isQualifiedName and: [extensionsFilter value])				or: [(each isUnknown and: [unknownFilter value])				or: [each isConflicted and: [conflictedFilter value]]]]]</body><body package="CypressDifferencingTools">handleChangedSelection	currentSelection := self currentSelectedPackageInformation.	self updateButtons</body><body package="CypressDifferencingTools">handleCompareAllChangedToDiskActionButtonPressed	GbsPackageComparisonTool		onGemStoneDifferences: (GemStone.Gbs.GbsCodeComponentComparison				fromGemStoneDifferences: (self						comparePackagesFrom: self packagesWithChanges))</body><body package="CypressDifferencingTools">handleCompareConflictingCategorizationsActionButtonPressed	| errors |	errors := self compareDefinitionsFromConflictedPackageInformation: currentSelection.	Dialog warn: errors size printString, ' mis-categorized definitions found'.	errors notEmpty ifTrue: [errors inspect].</body><body package="CypressDifferencingTools">handleCompareSelectedToDiskActionButtonPressed	GbsPackageComparisonTool		onGemStoneDifferences: (GemStone.Gbs.GbsCodeComponentComparison				fromGemStoneDifferences: (self						comparePackageFrom: (currentSelection ifNil: [^self])))</body><body package="CypressDifferencingTools">handleFilterChanged	self handleRefreshActionButtonPressed</body><body package="CypressDifferencingTools">handleFindPackagesFromDiskActionButtonPressed	| path |	path := (IncrementalSearchDialog selectGemStoneServerPath: self preferredServerPath) ifNil: [^self].	self lookForUnloadedPackagesIn: path.	self handleFilterChanged.</body><body package="CypressDifferencingTools">handleLookForPackagesOnDiskActionButtonPressed	| path |	path := (IncrementalSearchDialog selectGemStoneServerPath: self preferredServerPath) ifNil: [^self].	self lookForLoadedPackagesIn: path.	self handleFilterChanged.</body><body package="CypressDifferencingTools">handleReLoadSelectedPackageActionButtonPressed	| loadIssues |	loadIssues := self loadPackageFrom: (currentSelection ifNil: [^self]).	loadIssues isEmpty		ifFalse: 			[Dialog				warn: 'Problems loading package named ' , currentSelection name printString						, '	' , (loadIssues collect: [:each | each size]) printString.			loadIssues inspect].	self handleFilterChanged.</body><body package="CypressDifferencingTools">handleRefreshActionButtonPressed	self refreshView.	self refreshPackagesTableWith: self filteredPackageInformationList</body><body package="CypressDifferencingTools">handleResizeEvent	self handleRefreshActionButtonPressed</body><body package="CypressDifferencingTools">handleSaveAllChangedToDiskActionButtonPressed	self writePackagesToDiskFrom: self packagesWithChanges.	self refreshView.</body><body package="CypressDifferencingTools">handleSaveSelectedToDiskActionButtonPressed	self writePackageToDiskFrom: (currentSelection ifNil: [^self]).	self refreshView.</body><body package="CypressDifferencingTools">handleSetPackageLocationActionButtonPressed	| path |	path := (IncrementalSearchDialog selectGemStoneServerPath: self preferredServerPath) ifNil: [^self].	self updateSavedLocation: path for: currentSelection.	self refreshView</body></methods><methods><class-id>CypressPackageManagerView</class-id> <category>updating - private</category><body package="CypressDifferencingTools">namesOfButtonsRequiringSelectedPackage	^#(#SaveSelectedToDiskActionButton #ReLoadSelectedPackageActionButton #CompareSelectedToDiskActionButton #SetPackageLocationActionButton)</body><body package="CypressDifferencingTools">namesOfButtonsSpecificToConflictingPackage	^#(#CompareConflictingCategorizationsActionButton)</body><body package="CypressDifferencingTools">refreshPackagesTableWith: someCypressPackageInformations	packagesSelectionInTable list: someCypressPackageInformations</body><body package="CypressDifferencingTools">refreshView	self resizePackagesTable</body><body package="CypressDifferencingTools">resizePackagesTable	| changedWidth |	changedWidth := self mainWindow width - builder windowSpec bounds width.	packagesTable		columnWidths: (self distribute: changedWidth over: self defaultColumnWidths)</body><body package="CypressDifferencingTools">updateButtons	| isSinglePackageSelected isConflictedPackageSelected |	isSinglePackageSelected := currentSelection notNil.	self namesOfButtonsRequiringSelectedPackage		do: [:each | (self widgetAt: each) isEnabled: isSinglePackageSelected].	isConflictedPackageSelected := currentSelection notNil and: [currentSelection isConflicted].	self namesOfButtonsSpecificToConflictingPackage		do: [:each | (self widgetAt: each) isEnabled: isConflictedPackageSelected].</body></methods><methods><class-id>CypressPackageManagerView</class-id> <category>aspects</category><body package="CypressDifferencingTools">conflictedFilter	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^conflictedFilter isNil		ifTrue:			[conflictedFilter := true asValue]		ifFalse:			[conflictedFilter]</body><body package="CypressDifferencingTools">extensionsFilter	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^extensionsFilter isNil		ifTrue:			[extensionsFilter := false asValue]		ifFalse:			[extensionsFilter]</body><body package="CypressDifferencingTools">knownPackagesFilter	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^knownPackagesFilter isNil		ifTrue:			[knownPackagesFilter := true asValue]		ifFalse:			[knownPackagesFilter]</body><body package="CypressDifferencingTools">unknownFilter	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^unknownFilter isNil		ifTrue:			[unknownFilter := true asValue]		ifFalse:			[unknownFilter]</body></methods><methods><class-id>CypressPackageManagerView</class-id> <category>interface opening - private</category><body package="CypressDifferencingTools">postBuildWith: aBuilder	"This message is sent by the builder when it has completed work on 	either a complete window or a SubCanvas."	super postBuildWith: aBuilder.	self handleRefreshActionButtonPressed</body><body package="CypressDifferencingTools">postOpenWith: aBuilder	"This message is sent by the builder after it has opened a completed 	window."	super postOpenWith: aBuilder.	self mainWindow when: #resize send: #handleResizeEvent to: self.	self handleResizeEvent.	self updateButtons.</body></methods><methods><class-id>GemStoneDirectorySearcher</class-id> <category>searching - private</category><body package="CypressDifferencingTools">fillDirectoryListingFor: somePathElements	currentDirectorySpec := self pathFor: somePathElements.	currentDirectoryListing := directoryStacks at: somePathElements				ifAbsentPut: 					[| list names |					list := GBSM								evaluate: 'GsFile contentsAndTypesOfDirectory: self onClient: false'								context: currentDirectorySpec.					names := OrderedCollection new.					1 to: list size						by: 2						do: 							[:index |							| each |							each := list at: index.							(each endsWith: '/..')								ifFalse: 									[names add: ((each endsWith: '/.')												ifTrue: [each copyFrom: 1 to: each size - 1]												ifFalse: [each , ((list at: index + 1) ifTrue: [''] ifFalse: ['/'])])]].					names asArray sort]</body><body package="CypressDifferencingTools">fillPartialMatchesForPrefix: aString	matchingSelections := aString isEmpty		ifTrue: [currentDirectoryListing]		ifFalse: [currentDirectoryListing select: [:each | each beginsWith: aString]]</body><body package="CypressDifferencingTools">filterPartialsFromDirectoryAndPrefix: aString	"Split a path into separate parts. The first part is always empty and	 the last part is always the prefix within the specified directory.		'/opt/git/x' tokensBasedOn: $/ ==&gt; OrderedCollection ('' 'opt' 'git' 'x')		'/' tokensBasedOn: $/ ==&gt; OrderedCollection ('' '')	"	| tokens |	tokens := aString tokensBasedOn: $/ .	self 		fillDirectoryListingFor: (tokens copyFrom: 1 to: tokens size - 1) asArray;		fillPartialMatchesForPrefix: aString</body><body package="CypressDifferencingTools">pathFor: somePathElements	| stream |	stream := String new writeStream.	somePathElements do: 			[:each |			stream				nextPutAll: each;				nextPutAll: '/'].	^stream contents</body></methods><methods><class-id>GemStoneDirectorySearcher</class-id> <category>searching</category><body package="CypressDifferencingTools">value: aString	self filterPartialsFromDirectoryAndPrefix: aString."Transcript cr; nextPutAll: aString; tab; nextPutAll: '==&gt;'; tab; nextPutAll: matchingSelections printString."	^matchingSelections</body></methods><methods><class-id>GemStoneDirectorySearcher</class-id> <category>initializing - private</category><body package="CypressDifferencingTools">initialize	super initialize.	directoryStacks := Dictionary new</body></methods><methods><class-id>GemStoneDirectorySearcher class</class-id> <category>instance creation</category><body package="CypressDifferencingTools">new	^super new		initialize;		yourself.</body></methods><methods><class-id>CypressPackageInformation</class-id> <category>accessing</category><body package="CypressDifferencingTools">changesCount	^changesCount</body><body package="CypressDifferencingTools">changesStatus	^self hasChanges		ifTrue: 			[(' (' , self changesCount printString , ')') asText				emphasizeAllWith: #color -&gt; ColorValue red]		ifFalse: ['']</body><body package="CypressDifferencingTools">classCount	^self imageCounts first</body><body package="CypressDifferencingTools">competingPackageNames	^competingPackageNames</body><body package="CypressDifferencingTools">competingPackageNamesString	^String streamContents: 			[:stream |			self competingPackageNames				do: [:each | stream nextPutAll: each printString]				separatedBy: [stream nextPutAll: ', ']]</body><body package="CypressDifferencingTools">description	self isKnown ifTrue: [^self repositoryDescription].	self isUnknown ifTrue: [^'&lt;unknown&gt;'].	^' &lt;', advice, '&gt;'</body><body package="CypressDifferencingTools">imageCounts	^imageCounts</body><body package="CypressDifferencingTools">imageDefinitionsStatus	^self classCount printString , '/' , self methodCount printString</body><body package="CypressDifferencingTools">methodCount	^self imageCounts last</body><body package="CypressDifferencingTools">name	^name</body><body package="CypressDifferencingTools">repositoryDescription	^repositoryDescription</body><body package="CypressDifferencingTools">savedLocation	^savedLocation</body><body package="CypressDifferencingTools">status	| changes |	(changes := self changesStatus) isEmpty ifTrue: [^self imageDefinitionsStatus].	^self imageDefinitionsStatus asText, changes</body></methods><methods><class-id>CypressPackageInformation</class-id> <category>testing - type</category><body package="CypressDifferencingTools">isConflicted	^type = 'Conflicted Name'</body><body package="CypressDifferencingTools">isKnown	^type = 'Known Package'</body><body package="CypressDifferencingTools">isQualifiedName	^type = 'Qualified Name'</body><body package="CypressDifferencingTools">isUnknown	^type = 'Unknown'</body></methods><methods><class-id>CypressPackageInformation</class-id> <category>testing</category><body package="CypressDifferencingTools">hasChanges	^self changesCount &gt; 0</body></methods><methods><class-id>Tools.IncrementalSearchDialog class</class-id> <category>dialog opening-predefined</category><body package="CypressDifferencingTools">selectGemStoneServerPath	"Prompt for and select a path on the server file system.	 The path may point to a directory or file.	 Answer nil if the dialogue is cancelled.	 Obviously, there must be a GemStone session active."	^self selectGemStoneServerPath: '/'</body><body package="CypressDifferencingTools">selectGemStoneServerPath: initialPath	"Prompt for and select a path on the server file system, starting from the initialPath.	 The path may point to a directory or file.	 Answer nil if the dialogue is cancelled.	 Obviously, there must be a GemStone session active."	| dialog |	dialog := IncrementalSearchDialog				forSelectionWithSearch: GemStoneDirectorySearcher new.	"One might think this would be helpful, but it actually makes it harder	 to drill down the directory tree.		dialog module pasteSelected: true.	"	dialog entry: initialPath.	^dialog select</body></methods><methods><class-id>GemStone.Gbs.GbxBrowser</class-id> <category>session actions</category><body package="CypressDifferencingTools">openCypressTools	CypressPackageManagerView open</body></methods><methods><class-id>CypressPackageManagerView class</class-id> <category>interface specs</category><body package="CypressDifferencingTools">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Cypress Package Manager' 			#min: #(#{Core.Point} 510 344 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 503 353 1178 697 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -220 1 -30 1 ) 					#name: #PackagesTable 					#model: #packagesTable 					#selectionStyle: #row ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.CompositeSpecCollection} 							#collection: #(								#(#{UI.ActionButtonSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 20 0 ) 									#name: #SaveSelectedToDiskActionButton 									#model: #handleSaveSelectedToDiskActionButtonPressed 									#label: 'Save Selected Package' 									#defaultable: true ) 								#(#{UI.ActionButtonSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 25 0 0 1 45 0 ) 									#name: #SaveAllChangedToDiskActionButton 									#model: #handleSaveAllChangedToDiskActionButtonPressed 									#label: 'Save All Changed Packages' 									#defaultable: true ) 								#(#{UI.ActionButtonSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 50 0 0 1 70 0 ) 									#name: #ReLoadSelectedPackageActionButton 									#model: #handleReLoadSelectedPackageActionButtonPressed 									#label: '(Re)Load Selected Package' 									#defaultable: true ) ) 							#compositeSpec: 							#(#{UI.CompositeSpec} 								#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 75 0 ) 								#name: #SaveAndLoadActionButtonsComposite ) ) 						#(#{UI.CompositeSpecCollection} 							#collection: #(								#(#{UI.ActionButtonSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 20 0 ) 									#name: #CompareSelectedToDiskActionButton 									#model: #handleCompareSelectedToDiskActionButtonPressed 									#label: 'Compare Selected to Repository' 									#defaultable: true ) 								#(#{UI.ActionButtonSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 25 0 0 1 45 0 ) 									#name: #CompareAllChangedToDiskActionButton 									#model: #handleCompareAllChangedToDiskActionButtonPressed 									#label: 'Compare All Changed to Repository' 									#defaultable: true ) 								#(#{UI.ActionButtonSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 50 0 0 1 70 0 ) 									#name: #CompareConflictingCategorizationsActionButton 									#model: #handleCompareConflictingCategorizationsActionButtonPressed 									#label: 'Compare Conflicting Categorizations' 									#defaultable: true ) ) 							#compositeSpec: 							#(#{UI.CompositeSpec} 								#layout: #(#{Graphics.LayoutFrame} 0 0 90 0 0 1 160 0 ) 								#name: #ComparisonButtonsComposite ) ) 						#(#{UI.CompositeSpecCollection} 							#collection: #(								#(#{UI.ActionButtonSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 20 0 ) 									#name: #SetPackageLocationActionButton 									#model: #handleSetPackageLocationActionButtonPressed 									#label: 'Set Selected Package Repository ...' 									#defaultable: true ) 								#(#{UI.ActionButtonSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 25 0 0 1 45 0 ) 									#name: #LookForPackagesOnDiskActionButton 									#model: #handleLookForPackagesOnDiskActionButtonPressed 									#label: 'Search Repository for Unknowns ...' 									#defaultable: true ) 								#(#{UI.ActionButtonSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 50 0 0 1 70 0 ) 									#name: #FindPackagesFromDiskActionButton 									#model: #handleFindPackagesFromDiskActionButtonPressed 									#label: 'Find Packages from Disk ...' 									#defaultable: true ) ) 							#compositeSpec: 							#(#{UI.CompositeSpec} 								#layout: #(#{Graphics.LayoutFrame} 0 0 180 0 0 1 250 0 ) 								#name: #SearchingActionButtonsComposite ) ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 -20 1 0 1 0 1 ) 							#name: #RefreshActionButton 							#model: #handleRefreshActionButtonPressed 							#label: 'Refresh' 							#defaultable: true ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} -200 1 5 0 -15 1 -15 1 ) 						#name: #ActionsComposite ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.Rectangle} 0 0 110 20 ) 							#name: #KnownPackagesCheckBox 							#model: #knownPackagesFilter 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #handleFilterChanged ) 							#label: 'Known Packages' ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.Rectangle} 120 0 230 20 ) 							#name: #ExtensionsCheckBox 							#model: #extensionsFilter 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #handleFilterChanged ) 							#label: 'Extensions' ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.Rectangle} 240 0 350 20 ) 							#name: #UnknownCheckBox 							#model: #unknownFilter 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #handleFilterChanged ) 							#label: 'Unknown' ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.Rectangle} 330 0 440 20 ) 							#name: #ConflictedCheckBox 							#model: #conflictedFilter 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #handleFilterChanged ) 							#label: 'Conflicted' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 15 0 -25 1 -220 1 -5 1 ) 						#name: #FilterComposite ) ) ) ) )</body></methods><methods><class-id>GemStone.Gbs.GbxVisualLauncher</class-id> <category>menus</category><body package="CypressDifferencingTools">openCypressTools	&lt;menuItem: 'Cypress Tools'		nameKey: #openCypressTools		enablement: #gbxIsLoggedIn		indication: nil		menu: #(#menuBar #browseMenu)		position: 60.60&gt;	CypressPackageManagerView open</body></methods><methods><class-id>GemStone.Gbs.GbxBrowser class</class-id> <category>resources</category><body package="CypressDifferencingTools">windowsMenu	"Tools.MenuEditor new openOnClass: self andSelector: #windowsMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Raise GemStone Windows' 				#nameKey: #raiseGemStoneWindows 				#value: #raiseGemStoneWindows ) 			#(#{UI.MenuItem} 				#rawLabel: 'Collapse GemStone Windows' 				#nameKey: #collapseGemStoneWindows 				#value: #collapseGemStoneWindows ) 			#(#{UI.MenuItem} 				#rawLabel: 'Refresh from GS Server' 				#nameKey: #update 				#value: #update ) 			#(#{UI.MenuItem} 				#rawLabel: 'Differencing Tools' 				#nameKey: #openDifferencingTools 				#value: #openDifferencingTools )			#(#{UI.MenuItem} 				#rawLabel: 'Cypress Tools' 				#nameKey: #openCypressTools 				#value: #openCypressTools ) ) #(2 1 2) nil ) decodeAsLiteralArray</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>GbxBrowser</name><environment>GemStone.Gbs</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>session userProfile methodTabSetting textMode dictionaryList classList protocolList methodList textValue stepPoint textView toolbarMenuHolder tabs meta left right methodSymbols classIsModifiable sourceText breakPointList classMenu methodMenu </inst-vars><class-inst-vars></class-inst-vars><imports>			Smalltalk.*			SpecialGemStoneObjects.*			GemStone.Gbs.*			</imports><category>GbsTools-GbsProgrammingTools</category><attributes><package>GbsProgrammingToolsVW</package></attributes></class><class><name>GbxVisualLauncher</name><environment>GemStone.Gbs</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parametersList sessionList sessionMode </inst-vars><class-inst-vars>gemIcon </class-inst-vars><imports></imports><category>GbsTools-GbsProgrammingTools</category><attributes><package>GbsProgrammingToolsVW</package></attributes></class></st-source>