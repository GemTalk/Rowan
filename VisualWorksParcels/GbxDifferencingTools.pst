<?xml version="1.0"?><st-source><!-- Name: GbxDifferencingToolsComment: GbxDifferencingTools is a package to support viewing differences in server code.DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'Store-Code Comparison' '') #(#any 'Tools-Blueprints' '') #(#any 'GbsRuntime' '') #(#any 'GbsTools' '') #(#any 'Tools-IDE-ListIcons' '') #(#any 'StoreBase' ''))PackageName: GbxDifferencingToolsParcel: #('GbxDifferencingTools')ParcelDirectory: GbxDifferencingToolsPrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'Store-Code Comparison' #componentType #package) #(#name 'Tools-Blueprints' #componentType #package) #(#name 'GbsRuntime' #componentType #bundle) #(#name 'GbsTools' #componentType #bundle) #(#name 'Tools-IDE-ListIcons' #componentType #package) #(#name 'StoreBase' #componentType #bundle))PrerequisiteParcels: #(#('Base VisualWorks' '') #('Store-Code Comparison' '') #('Tools-Blueprints' '') #('GbsRuntime' '') #('GbsTools' '') #('Tools-IDE-ListIcons' '') #('StoreBase' ''))Version: 20Date: 12:55:36 PM September 28, 2013 --><time-stamp>From VisualWorksÂ®, 7.9.1 of October 18, 2012 on September 28, 2013 at 12:55:36 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>ServerCode</name><environment>GemStone</environment><private>true</private><imports>			private Smalltalk.*			</imports><category></category><attributes><package>GbxDifferencingTools</package></attributes></name-space><class><name>GbsSymbolDictionaryPseudoPackage</name><environment>Kernel</environment><super>Kernel.CodeComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GbxDifferencingTools</package></attributes></class><class><name>GbsSingleMethodView</name><environment>GemStone.Gbs</environment><super>Tools.SingleMethodView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GbxDifferencingTools</package></attributes></class><class><name>GbsClassBlueprintComparisonView</name><environment>GemStone.Gbs</environment><super>Tools.ClassBlueprintComparisonView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GbxDifferencingTools</package></attributes></class><class><name>GbsPackageComparisonTool</name><environment>Tools</environment><super>Tools.PackageComparisonTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private GemStone.Gbs.*			</imports><category></category><attributes><package>GbxDifferencingTools</package></attributes></class><class><name>GbsPackageComparisonHeaderView</name><environment>Tools</environment><super>Tools.PackageComparisonHeaderView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GbxDifferencingTools</package></attributes></class><class><name>GbsScrolledComparisonShell</name><environment>GemStone.Gbs</environment><super>Tools.ScrolledComparisonShell</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GbxDifferencingTools</package></attributes></class><class><name>GbsCodeComponentComparison</name><environment>GemStone.Gbs</environment><super>Tools.CodeComponentComparison</super><private>false</private><indexed-type>none</indexed-type><inst-vars>differences </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GbxDifferencingTools</package></attributes></class><class><name>GbsMethodComparisonView</name><environment>GemStone.Gbs</environment><super>Tools.MethodComparisonView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GbxDifferencingTools</package></attributes></class><class><name>GbsClassBlueprint</name><environment>GemStone.Gbs</environment><super>Tools.ClassBlueprint</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classVariables </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GbxDifferencingTools</package></attributes></class><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage</class-id> <category>editing</category><body package="GbxDifferencingTools">addSelector: selector toClass: aClass	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">addStatic: staticKey to: aClassOrNameSpace	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">removeShared: aSymbol from: aClassOrNameSpace	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">removeStatic: staticKey from: aClassOrNameSpace	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage</class-id> <category>testing</category><body package="GbxDifferencingTools">hasExtensions	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">hasItselfBeenModified	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">isImageModel	^false</body><body package="GbxDifferencingTools">isPackage	^true</body><body package="GbxDifferencingTools">isSaveable	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage</class-id> <category>private-load/unload</category><body package="GbxDifferencingTools">addObject: aNameSpace	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">putStoredPropertiesIn: aDictionary	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">removeClass: aClass unloaded: aBoolean	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">removeNameSpace: aNameSpace unloaded: aBoolean	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">runClassExtensionPostLoadMethods	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage</class-id> <category>private-updating</category><body package="GbxDifferencingTools">name: aString	"Don't do anything resembling managing of code, as this component really isn't	 generally loadable or manageable in that way."	name := aString.</body><body package="GbxDifferencingTools">owner: aString	"Don't do anything resembling managing of code, as this component really isn't	 generally loadable or manageable in that way."	properties at: #owner put: aString</body><body package="GbxDifferencingTools">timestamp: aString	"Don't do anything resembling managing of code, as this component really isn't	 generally loadable or manageable in that way."	properties at: #timestamp put: aString</body></methods><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage</class-id> <category>queries</category><body package="GbxDifferencingTools">definedClasses	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">definedNameSpaces	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">definesClassOrNameSpace: aClassOrNameSpace	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage</class-id> <category>private</category><body package="GbxDifferencingTools">manager	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage</class-id> <category>changes</category><body package="GbxDifferencingTools">addOtherChange: symbol	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">markNotModified	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage</class-id> <category>load/unload</category><body package="GbxDifferencingTools">unloadLogged: log	" *** This method was defined by CodeComponent as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage</class-id> <category>accessing</category><body package="GbxDifferencingTools">owner	^properties at: #owner ifAbsent: ['']</body><body package="GbxDifferencingTools">toolListText	^self name, ' (', self timestamp, ')'</body><body package="GbxDifferencingTools">version	^self timestamp</body></methods><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage class</class-id> <category>constants</category><body package="GbxDifferencingTools">componentType	" *** This method was defined by CodeComponent class as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage class</class-id> <category>private-loading</category><body package="GbxDifferencingTools">handlePrerequisite: anArray	" *** This method was defined by CodeComponent class as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage class</class-id> <category>Instance Creation</category><body package="GbxDifferencingTools">forDictionaryNamed: symbolDictName andTimestamp: aString	"Answer a suitable instance representing a package, with a name derived from symbolDictName	 and the specified timestamp. The symbolDictName comprises the name of a SymbolDictionary	 concatenated with the userId who owns it."	| splitPoint |	splitPoint := symbolDictName indexOf: $-.	^self		named: symbolDictName		owner: (symbolDictName copyFrom: splitPoint + 1 to: symbolDictName size)		timestamp: aString</body><body package="GbxDifferencingTools">named: symbolDictionaryName owner: userId timestamp: aString	^self new		name: symbolDictionaryName;		owner: userId;		timestamp: aString;		yourself</body></methods><methods><class-id>Kernel.GbsSymbolDictionaryPseudoPackage class</class-id> <category>signals</category><body package="GbxDifferencingTools">abortLoadingSignal	" *** This method was defined by CodeComponent class as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="GbxDifferencingTools">abortUnloadingSignal	" *** This method was defined by CodeComponent class as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>GemStone.Gbs.GbsSingleMethodView</class-id> <category>menu</category><body package="GbxDifferencingTools">browseGemStoneImplementors: aSelector	GemStone.Gbs.GbxBrowser browseAllImplementorsOf: aSelector		inSession: GBSM currentSession</body><body package="GbxDifferencingTools">browseGemStoneSenders: aSelector	GemStone.Gbs.GbxBrowser browseAllCallsOn: aSelector		inSession: GBSM currentSession</body></methods><methods><class-id>GemStone.Gbs.GbsClassBlueprintComparisonView</class-id> <category>menu</category><body package="GbxDifferencingTools">browseGemStoneClassInHierarchy	"Spawn a hierarchy browser on the selected class."	| session className classHolder |	session := GBSM currentSession.	className := self objectReference path last.	classHolder := GbxClassHolder name: className				proxy: (session resolveSymbol: className ifAbsent: [nil]).	^(GemStone.Gbs.GbxHierarchyBrowser new)		myClass: classHolder;		methodTabSetting: #instance;		session: session;		classList: nil			class: classHolder			protocolList: nil			protocol: nil			methodList: nil			selectedMethods: nil;		open;		yourself</body></methods><methods><class-id>GemStone.Gbs.GbsClassBlueprintComparisonView</class-id> <category>view construction</category><body package="GbxDifferencingTools">addedMethodRow: aMethodBlueprint	^(GbsSingleMethodView new)		method: aMethodBlueprint;		isAddition: true;		populate</body><body package="GbxDifferencingTools">changedMethodRowFrom: anOriginalMethodBlueprint to: aChangedMethodBlueprint	^GbsMethodComparisonView new leftMethod: anOriginalMethodBlueprint rightMethod: aChangedMethodBlueprint</body><body package="GbxDifferencingTools">removedMethodRow: aMethodBlueprint	^(GbsSingleMethodView new)		method: aMethodBlueprint;		isAddition: false;		populate</body></methods><methods><class-id>GemStone.Gbs.GbsClassBlueprintComparisonView</class-id> <category>detail rows</category><body package="GbxDifferencingTools">classVariablesComparisonRow	^BindingTextualDetailComparisonView new		icon: self modifyClassVariablesIcon		name: 'Class Variables'		leftText: (self formattedInstanceVariables: leftBlueprint classVariables)		rightText: (self formattedInstanceVariables: rightBlueprint classVariables)</body><body package="GbxDifferencingTools">classVariablesSingularRow	^self singularBlueprint classVariables isEmpty		ifTrue: [nil]		ifFalse: 			[BindingTextualDetailSingularView new				icon: (self annotateIconWithDisposition: self modifyClassVariablesIcon)				name: 'Class Variables'				text: (self						formattedInstanceVariables: self singularBlueprint classVariables)]</body><body package="GbxDifferencingTools">modifyClassVariablesIcon	^ComparisonIcons modifyClassVariables</body></methods><methods><class-id>GemStone.Gbs.GbsClassBlueprintComparisonView</class-id> <category>private</category><body package="GbxDifferencingTools">bindingDetailIcon: aSelector	^aSelector = #classVariables		ifTrue: [self modifyClassVariablesIcon]		ifFalse: [super bindingDetailIcon: aSelector]</body></methods><methods><class-id>Tools.GbsPackageComparisonTool</class-id> <category>initialize-release</category><body package="GbxDifferencingTools">addHeaderBand: aComparison	| headerView |	headerView := GbsPackageComparisonHeaderView new.	headerView comparison: aComparison.	self add: headerView</body><body package="GbxDifferencingTools">addMainComparisonArea: aComparison	| scrolled particularsPanel |	particularsPanel := GbsScrolledComparisonShell new.	particularsPanel comparisonSource: aComparison.	scrolled := (BorderDecorator on: particularsPanel)				useVerticalScrollbar;				noBorder.	self add: scrolled</body></methods><methods><class-id>Tools.GbsPackageComparisonTool class</class-id> <category>instance creation</category><body package="GbxDifferencingTools">onGemStoneDifferences: gemstoneCmparison	| view originalOrigin |	view := self new.	view openInWindow.	originalOrigin := view topComponent globalOrigin.	view populateWith: gemstoneCmparison.	view resizeWindowFrom: originalOrigin.	^view</body></methods><methods><class-id>Tools.GbsPackageComparisonHeaderView</class-id> <category>menu</category><body package="GbxDifferencingTools">browseMenuItem	self shouldNotImplement</body><body package="GbxDifferencingTools">fileoutChangesToGetToMenuTarget	| dialog targetFile |	dialog := SaveFileDialog new.	dialog		addFileFilter: 'GemStone source (*.gs)' pattern: '*.gs';		fileCondition: #new;		defaultFilename: (Filename					filterFilename: (#x1sDashDiffsst &lt;&lt; #store &gt;&gt; '&lt;1s&gt;-diffs.gs'							expandMacrosWith: menuTarget name))						asFilename.	(targetFile := dialog select) ifNil: [^self].	comparison fileoutChangesFromComponent: menuTarget toFileNamed: targetFile</body><body package="GbxDifferencingTools">loadMenuItem	self shouldNotImplement</body><body package="GbxDifferencingTools">publishMenuItem	self shouldNotImplement</body><body package="GbxDifferencingTools">versionsMenuItem	self shouldNotImplement</body></methods><methods><class-id>GemStone.Gbs.GbsScrolledComparisonShell</class-id> <category>view construction</category><body package="GbxDifferencingTools">newClassRollup: aBindingReference	| classView |	classView := GbsClassBlueprintComparisonView new.	classView		leftClass: (comparisonSource removedClasses at: aBindingReference ifAbsent: [nil])		leftMethods: (comparisonSource removedMethods at: aBindingReference ifAbsent: [Array new])		rightClass: (comparisonSource addedClasses at: aBindingReference ifAbsent: [nil])		rightMethods: (comparisonSource addedMethods at: aBindingReference ifAbsent: [Array new]).	^classView</body></methods><methods><class-id>GemStone.Gbs.GbsCodeComponentComparison</class-id> <category>initialize-release</category><body package="GbxDifferencingTools">blueprintForClassNamed: className from: classDifference inPackageNamed: packageName or: aBlock	"A GemStone class difference is a Dictionary structure comprising the class details (comment,	 category, definition, class and instance methods dictionaries).	 Answer a corresponding ClassBlueprint."	| definitionParts classDefinition blueprint |	classDefinition := classDifference at: 'class definition'				ifAbsent: [self definitionNotAvailable].	"Make sure we create a blueprint if any of the differences unrelated to the class definition have changed."	classDefinition = self definitionNotAvailable		ifTrue: 			[((classDifference includesKey: 'class comment')				or: [classDifference includesKey: 'classCategory'])					ifTrue: 						[blueprint := GbsClassBlueprint new.						^blueprint							reference: ('GemStone.ServerCode.' , className) asQualifiedReference;							packageName: packageName;							attributes: (OrderedCollection with: (classDifference at: 'class category' ifAbsent: ['']));							comment: (classDifference at: 'class comment' ifAbsent: ['']);							yourself]					ifFalse: [^aBlock value]].	blueprint := GbsClassBlueprint new.	definitionParts := blueprint parseDefinition: classDefinition.	^blueprint		superclassReference: ('GemStone.ServerCode.'					, (self classNameFromClassDefinition: classDefinition))						asQualifiedReference makeUnambiguous;		reference: ('GemStone.ServerCode.' , className) asQualifiedReference;		behaviorType: (self classTypeFromClassDefinitionParts: definitionParts);		instanceVariables: (definitionParts at: #instVarNames: ifAbsent: [#()]);		classInstanceVariables: (definitionParts at: #classInstVars:);		classVariables: (definitionParts at: #classVars:);		isPrivate: false;		importsString: ((definitionParts at: #poolDictionaries:) inject: String new					into: [:result :each | result , (result isEmpty ifTrue: [''] ifFalse: [' ']) , each]);		packageName: packageName;		attributes: (((definitionParts at: #options:) asOrderedCollection)					add: (classDifference at: 'class category' ifAbsent: ['']);					yourself);		comment: (classDifference at: 'class comment' ifAbsent: ['']);		yourself</body><body package="GbxDifferencingTools">classNameFromClassDefinition: classDefinition	^(classDefinition tokensBasedOn: Character space) first</body><body package="GbxDifferencingTools">classTypeFromClassDefinitionParts: definitionParts	^(#(#(#byteSubclass: 'byte') #(#indexableSubclass: 'indexable') #(#subclass: 'none')) 		detect: [:each | definitionParts includesKey: each first]		ifNone: [^'Unknown']) last</body><body package="GbxDifferencingTools">decorateGemStoneClassDefinition: classDifference name: className in: symbolDictName addingTo: classDictionary	| blueprint |	blueprint := self				blueprintForClassNamed: className				from: classDifference				inPackageNamed: symbolDictName				or: [^self].	^classDictionary at: blueprint reference put: blueprint</body><body package="GbxDifferencingTools">decorateGemStoneDifferenceSet: differencesDictionary addingSymbolDictionariesTo: componentDictionary classesTo: classDictionary andMethodsTo: methodDictionary	"A GemStone difference set comprises a nested Dictionary structure corresponding to the SymbolDictionary,	 the Class, and the class details (comment, category, definition, class and instance methods dictionaries).	 Decorate the structure so that it can be displayed by the changes browser, adding the decorated	 class differences and method differences into the corresponding Dictionary."	| timestamp |		"The DateAndTime is a delegate, so get a string representation to work with on the client."	timestamp := (differencesDictionary at: 'Finished at') performOnGsServer: #printString.	(differencesDictionary select: [:each | each isKindOf: Dictionary])		keysAndValuesDo: 			[:symbolDictName :classesDifferences |			componentDictionary				add: (GbsSymbolDictionaryPseudoPackage forDictionaryNamed: symbolDictName						andTimestamp: (classesDifferences at: 'Timestamp' ifAbsent: [timestamp])).			(classesDifferences select: [:each | each isKindOf: Dictionary]) keysAndValuesDo: 					[:className :classDifference |					self						decorateGemStoneClassDefinition: classDifference							name: className							in: symbolDictName							addingTo: classDictionary;						decorateGemStoneMethodDifferences: (classDifference at: 'class methods'									ifAbsent: [Dictionary new])							meta: true							className: className							in: symbolDictName							addingTo: methodDictionary;						decorateGemStoneMethodDifferences: (classDifference at: 'instance methods'									ifAbsent: [Dictionary new])							meta: false							className: className							in: symbolDictName							addingTo: methodDictionary]]</body><body package="GbxDifferencingTools">decorateGemStoneMethodDifferences: differencesDictionary meta: aBoolean className: className in: symbolDictName addingTo: methodDictionary	"A GemStone difference set comprises a nested Dictionary structure corresponding to the SymbolDictionary,	 the Class, and the class details (comment, category, definition, class and instance methods dictionaries).	 Decorate the structure so that it can be displayed by the changes browser, adding the decorated	 class differences and method differences into the corresponding Dictionary."	| methodBlueprints |	differencesDictionary isEmpty ifTrue: [^self].	methodBlueprints := OrderedCollection new.	differencesDictionary keysAndValuesDo: 			[:methodName :categoryAndSource |			methodBlueprints add: ((MethodBlueprint new)						category: categoryAndSource key;						classReference: ('GemStone.ServerCode.' , className) asQualifiedReference;						isInstanceBehavior: aBoolean not;						original: nil;		"No original Store item!"						packageName: symbolDictName;						selector: methodName;						source: categoryAndSource value;						yourself)].	(methodDictionary		at: ('GemStone.ServerCode.' , className) asQualifiedReference		ifAbsentPut: [OrderedCollection new])			addAll: methodBlueprints</body><body package="GbxDifferencingTools">decorateNewerGemStoneDifferenceSet	self		decorateGemStoneDifferenceSet: self newerDifferenceSet		addingSymbolDictionariesTo: self rightCodeComponents		classesTo: self addedClasses		andMethodsTo: self addedMethods</body><body package="GbxDifferencingTools">decorateOlderGemStoneDifferenceSet	self		decorateGemStoneDifferenceSet: self olderDifferenceSet		addingSymbolDictionariesTo: self leftCodeComponents		classesTo: self removedClasses		andMethodsTo: self removedMethods</body><body package="GbxDifferencingTools">definitionNotAvailable	^'definition not available' printString</body><body package="GbxDifferencingTools">initializeForGemStoneDifferences	self		leftCodeComponents: OrderedCollection new;		rightCodeComponents: OrderedCollection new;		removedSharedVariables: Dictionary new;		addedSharedVariables: Dictionary new;		removedNamespaces: Dictionary new;		addedNamespaces: Dictionary new;		removedClasses: Dictionary new;		addedClasses: Dictionary new;		removedMethods: Dictionary new;		addedMethods: Dictionary new;		removedPackageProperties: Dictionary new;		addedPackageProperties: Dictionary new;		addedBundleProperties: Dictionary new;		removedBundleProperties: Dictionary new</body><body package="GbxDifferencingTools">initializeFromGemStoneDifferences: aDictionary	"A GemStone differences dictionary comprises elements at two keys: older and newer.	 Each value is in turn a nested Dictionary structure corresponding to the SymbolDictionary,	 the Class, and the class details (comment, category, definition, class and instance methods	 dictionaries)."	self		initializeForGemStoneDifferences;		differences: aDictionary;		decorateOlderGemStoneDifferenceSet;		decorateNewerGemStoneDifferenceSet;		sortCollections</body><body package="GbxDifferencingTools">sortCollections	self		removedMethods: (self removedMethods collect: [:each | each sorted]);		addedMethods: (self addedMethods collect: [:each | each sorted]);		leftCodeComponents: (self leftCodeComponents sorted: [:a :b | a name &lt; b name]);		rightCodeComponents: (self rightCodeComponents sorted: [:a :b | a name &lt; b name])</body></methods><methods><class-id>GemStone.Gbs.GbsCodeComponentComparison</class-id> <category>filing out</category><body package="GbxDifferencingTools">changesFileoutAddedClassFromBlueprint: aClassBlueprint on: stream	| className |	className := aClassBlueprint reference path last.	stream		cr;		nextPutAll: 'theClass := ((AllUsers userWithId: '					, aClassBlueprint packageOwnerName printString						, ' ifAbsent: [^nil]) symbolList detect: [:each | each name = #'						, aClassBlueprint symbolDictionaryName , '] ifNone: [^nil]) at: '					, className asString printString						, ' asSymbol ifAbsent: [^nil].theClass fileOutClassOn: stream.';		cr</body><body package="GbxDifferencingTools">changesFileoutAddedMethodFromBlueprint: aMethodBlueprint on: stream	stream		cr;		nextPutAll: aMethodBlueprint classReference path last;		nextPutAll: (aMethodBlueprint isInstanceBehavior					ifTrue: ['']					ifFalse: [' class']);		nextPutAll: ' fileOutMethod: ';		nextPutAll: aMethodBlueprint selector printString;		nextPutAll: ' environmentId: 0 on: stream.'</body><body package="GbxDifferencingTools">changesFileoutChangedClassFromBlueprint: aClassBlueprint on: stream	| className |	className := aClassBlueprint reference path last.	stream		cr;		nextPutAll: 'theClass := ((AllUsers userWithId: '					, aClassBlueprint packageOwnerName printString						, ' ifAbsent: [^nil]) symbolList detect: [:each | each name = #'						, aClassBlueprint symbolDictionaryName , '] ifNone: [^nil]) at: '					, className asString printString						, ' asSymbol ifAbsent: [^nil].theClass fileOutPreClassOn: stream.stream nextPutAll: ''doit''; nextPut: Character lf;      nextPutAll: theClass definition; nextPut: Character lf;      nextPut: $%; nextPut: Character lf.stream nextPutAll: ''doit''; nextPut: Character lf;      nextPutAll: '''						, className						, ' category: ''; nextPutAll: theClass category printString; nextPut: $.; nextPut: Character lf.stream nextPut: $%; nextPut: Character lf.theClass fileOutCommentOn: stream.';		cr</body><body package="GbxDifferencingTools">changesFileoutChangedMethodFromBlueprint: aMethodBlueprint on: stream	self changesFileoutAddedMethodFromBlueprint: aMethodBlueprint on: stream</body><body package="GbxDifferencingTools">changesFileoutDeletedClassFromBlueprint: aClassBlueprint on: stream	| className |	className := aClassBlueprint reference path last.	stream		cr;		nextPutAll: 'stream			cr;			nextPutAll: ''doit''; nextPut: Character lf;			nextPutAll: ''((AllUsers userWithId: '''					, aClassBlueprint packageOwnerName printString						, ''' ifAbsent: [^nil]) symbolList detect: [:each | each name = #'''''						, aClassBlueprint symbolDictionaryName						, '''''] ifNone: [^nil]) removeKey: ''' , className asString printString					, ''' asSymbol ifAbsent: [^nil].''; cr;			nextPut: $%; nextPut: Character lf.';		cr</body><body package="GbxDifferencingTools">changesFileoutDeletedMethodFromBlueprint: aMethodBlueprint on: stream	stream		cr;		nextPutAll: 'stream cr; 			nextPutAll: ''doit''; nextPut: Character lf;			nextPutAll: ''';			nextPutAll: aMethodBlueprint classReference path last;			nextPutAll: (aMethodBlueprint isInstanceBehavior						ifTrue: ['']						ifFalse: [' class']);			nextPutAll: ' removeSelector: ';			nextPutAll: aMethodBlueprint selector printString;			nextPutAll: ' environmentId: 0 ifAbsent: [].''; cr;			nextPut: $%; nextPut: Character lf.'</body><body package="GbxDifferencingTools">changesFileoutFromComponent: aComponent	| stream processedClasses |	stream := (String new writeStream)				nextPutAll: '	| stream theClass |';				cr;				nextPutAll: 'stream := WriteStream on: String new.';				cr.	processedClasses := Set new.	self		classesInPackageNamed: aComponent name			added: 				[:aClassBlueprint |				self changesFileoutAddedClassFromBlueprint: aClassBlueprint on: stream.				processedClasses add: aClassBlueprint reference]			changed: 				[:aClassBlueprint |				self changesFileoutChangedClassFromBlueprint: aClassBlueprint on: stream]			deleted: 				[:aClassBlueprint |				self changesFileoutDeletedClassFromBlueprint: aClassBlueprint on: stream.				processedClasses add: aClassBlueprint reference];		methodsInPackageNamed: aComponent name			notAlreadyIn: processedClasses			added: 				[:aMethodBlueprint |				self changesFileoutAddedMethodFromBlueprint: aMethodBlueprint on: stream]			changed: 				[:aMethodBlueprint |				self changesFileoutChangedMethodFromBlueprint: aMethodBlueprint on: stream]			deleted: 				[:aMethodBlueprint |				self changesFileoutDeletedMethodFromBlueprint: aMethodBlueprint on: stream].	stream		cr;		cr;		nextPutAll: '^stream contents'.	^stream contents</body><body package="GbxDifferencingTools">classesInPackageNamed: aName added: addedBlock changed: changedBlock deleted: deletedBlock	| added removed changed classKeys |	added := self addedClasses select: [:each | each packageName = aName].	removed := self removedClasses select: [:each | each packageName = aName].	changed := Dictionary new.	classKeys := (added keys)				addAll: removed keys;				yourself.	(classKeys		select: [:each | (added includesKey: each) and: [removed includesKey: each]])			do: 				[:each |				changed at: each put: (added removeKey: each).				removed removeKey: each].	classKeys sorted do: 			[:each |			added at: each ifPresent: [:blueprint | addedBlock value: blueprint].			changed at: each ifPresent: [:blueprint | changedBlock value: blueprint].			removed at: each ifPresent: [:blueprint | deletedBlock value: blueprint]]</body><body package="GbxDifferencingTools">fileoutChangesFromComponent: aComponent toFileNamed: targetFile	self fileoutUsing: [self changesFileoutFromComponent: aComponent]		toFileNamed: targetFile</body><body package="GbxDifferencingTools">fileoutUsing: aBlock toFileNamed: targetFile	targetFile writeStream		nextPutAll: (GBSM currentSession evaluate: aBlock value);		close</body><body package="GbxDifferencingTools">methodsFromAdded: added fromRemoved: removed added: addedBlock changed: changedBlock deleted: deletedBlock	| addedKeyed removedKeyed |	addedKeyed := added inject: Dictionary new into: [:dict :each | dict at: each printString put: each; yourself].	removedKeyed := removed inject: Dictionary new into: [:dict :each | dict at: each printString put: each; yourself].	(Set new addAll: addedKeyed keys; addAll: removedKeyed keys; yourself) sorted do: 			[:each |			(addedKeyed includesKey: each)				ifTrue: 					[(removedKeyed includesKey: each)						ifTrue: [changedBlock value: (addedKeyed at: each)]						ifFalse: [addedBlock value: (addedKeyed at: each)]]				ifFalse: [deletedBlock value: (removedKeyed at: each)]]</body><body package="GbxDifferencingTools">methodsInPackageNamed: aName notAlreadyIn: processedClasses added: addedBlock changed: changedBlock deleted: deletedBlock	| added removed classes |	added := (self addedMethods				collect: [:someMethods | someMethods select: [:each | each packageName = aName and: [(processedClasses includes: each classReference) not]]])					reject: [:each | each isEmpty].	removed := (self removedMethods				collect: [:someMethods | someMethods select: [:each | each packageName = aName and: [(processedClasses includes: each classReference) not]]])					reject: [:each | each isEmpty].	classes := (Set new addAll: added keys; addAll: removed keys; yourself) sorted.	classes do: [:eachClass |		self methodsFromAdded: (added at: eachClass ifAbsent: [#()])			fromRemoved: (removed at: eachClass ifAbsent: [#()])			added: addedBlock changed: changedBlock deleted: deletedBlock	]</body></methods><methods><class-id>GemStone.Gbs.GbsCodeComponentComparison</class-id> <category>converting</category><body package="GbxDifferencingTools">flipped	^self copy invert</body></methods><methods><class-id>GemStone.Gbs.GbsCodeComponentComparison</class-id> <category>accessing - private</category><body package="GbxDifferencingTools">differences: anObject	differences := anObject</body></methods><methods><class-id>GemStone.Gbs.GbsCodeComponentComparison</class-id> <category>accessing</category><body package="GbxDifferencingTools">differences	^differences</body><body package="GbxDifferencingTools">newerDifferenceSet	^self differences at: 'newer'</body><body package="GbxDifferencingTools">olderDifferenceSet	^self differences at: 'older'</body></methods><methods><class-id>GemStone.Gbs.GbsCodeComponentComparison class</class-id> <category>instance creation</category><body package="GbxDifferencingTools">fromGemStoneDifferences: aDictionary	"A GemStone differences dictionary comprises elements at two keys: older and newer.	 Each value is in turn a nested Dictionary structure corresponding to the SymbolDictionary,	 the Class, and the class details (comment, category, definition, class and instance methods	 dictionaries)."	^self new		initializeFromGemStoneDifferences: aDictionary;		yourself</body></methods><methods><class-id>GemStone.Gbs.GbsMethodComparisonView</class-id> <category>menu</category><body package="GbxDifferencingTools">browseGemStoneImplementors: aSelector	GemStone.Gbs.GbxBrowser browseAllImplementorsOf: aSelector		inSession: GBSM currentSession</body><body package="GbxDifferencingTools">browseGemStoneSenders: aSelector	GemStone.Gbs.GbxBrowser browseAllCallsOn: aSelector		inSession: GBSM currentSession</body></methods><methods><class-id>GemStone.Gbs.GbsClassBlueprint</class-id> <category>accessing</category><body package="GbxDifferencingTools">bindingDetailSelectors	^#(#classVariables), super bindingDetailSelectors</body><body package="GbxDifferencingTools">classVariables	^classVariables</body><body package="GbxDifferencingTools">classVariables: aSequence	classVariables := (aSequence collect: #asString) asArray</body><body package="GbxDifferencingTools">packageOwnerName	" The packageName should be structured as &lt;SymbolDictionary name&gt;-&lt;UserProfile name&gt;."	^(self packageName tokensBasedOn: $-) last.</body><body package="GbxDifferencingTools">symbolDictionaryName	" The packageName should be structured as &lt;SymbolDictionary name&gt;-&lt;UserProfile name&gt;."	^(self packageName tokensBasedOn: $-) first.</body></methods><methods><class-id>GemStone.Gbs.GbsClassBlueprint</class-id> <category>comparing</category><body package="GbxDifferencingTools">= aClassBlueprint	^super = aClassBlueprint		and: [classVariables = aClassBlueprint classVariables]</body></methods><methods><class-id>Tools.ComparisonIcons class</class-id> <category>png imports</category><body package="GbxDifferencingTools">modifyClassVariables	^BehaviorIcons SharedVariableOverlay</body></methods><methods><class-id>Tools.PackageComparisonHeaderView</class-id> <category>menu</category><body package="GbxDifferencingTools">fileoutAllChangesToGetToMenuTarget	| dialog targetFile session comparitor fileManager targets |	dialog := SaveFileDialog new.	dialog		addFileFilter: 'Smalltalk source (*.st)' pattern: '*.st';		fileCondition: #new;		defaultFilename: 'Multiple-diffs.st' asFilename.	(targetFile := dialog select) ifNil: [^self].	session := Store.Glorp.StoreLoginFactory currentStoreSession.	targets := self menuTargetIsLeftSide		ifTrue: [self leftComponents]		ifFalse: [self rightComponents].	fileManager := SourceCodeStream write: targetFile encoding: #Source.	fileManager timeStamp.	[targets do: [:each |		[(Store.FilingOut for: each) started.		comparitor := Store.PackageComparitor					differencesWithPropertiesBetween: ((self targetComplimentOf: each)							asStoreComparisonObjectIn: session)					and: (each asStoreComparisonObjectIn: session).		fileManager sourceFormatter attributeFor: #package			compute: [:ignore | each name].		fileManager sourceFormatter attributeForMethods: #package			compute: [:ignore :igmore | each name].		comparitor fileOutMainToOtherDifferencesOn: fileManager.		(Store.FilingOut for: each) finished]				withStoreFeedbackOn: self topComponent]]				ensure: [fileManager close]</body></methods><methods><class-id>Tools.PackageComparisonHeaderView</class-id> <category>private</category><body package="GbxDifferencingTools">targetComplimentOf: aCodeComponent	"Return the codeComponent which is the counterpart to the current aCodeComponent"	| search |	search := (self leftComponents includes: aCodeComponent)				ifTrue: [self rightComponents]				ifFalse: [self leftComponents].	^search detect: 			[:each |			each name = aCodeComponent name and: [each isBundle = aCodeComponent isBundle]]		ifNone: [nil]</body></methods><methods><class-id>GemStone.Gbs.GbsSingleMethodView</class-id> <category>menu</category><body package="GbxDifferencingTools">browseGemStoneImplementorsMenuItem	&lt;itemInMenu: #(#menu) position: 10.2&gt;	^(MenuItem labeled: 'Browse Implementors')		value: [self browseGemStoneImplementors: method selector];		yourself</body><body package="GbxDifferencingTools">browseGemStoneSendersMenuItem	&lt;itemInMenu: #(#menu) position: 10.3&gt;	^(MenuItem labeled: 'Browse Senders')		value: [self browseGemStoneSenders: method selector];		yourself</body></methods><methods><class-id>GemStone.Gbs.GbsClassBlueprintComparisonView</class-id> <category>menu</category><body package="GbxDifferencingTools">browseGemStoneClassInHierarchyMenuItem	&lt;itemInMenu: #(#menu) position: 10.1&gt;	^(MenuItem labeled: 'Browse Class Hierarchy')		value: [self browseGemStoneClassInHierarchy];		yourself</body><body package="GbxDifferencingTools">browseImageLeftMenuItem	&lt;itemInMenu: #(#menu) position: 20.5&gt;	^(MenuItem		labeled: (#Browse1 &lt;&lt; #IDE &gt;&gt; 'Browse &lt;1s&gt;' expandMacrosWith: 'Image'))		enabled: [false];		visible: [false];		yourself</body><body package="GbxDifferencingTools">browseImageRightMenuItem	&lt;itemInMenu: #(#menu) position: 20.9&gt;	^(MenuItem		labeled: (#Browse1 &lt;&lt; #IDE &gt;&gt; 'Browse &lt;1s&gt;' expandMacrosWith: 'Image'))		enabled: [false];		visible: [false];		yourself</body><body package="GbxDifferencingTools">browseImageSameMenuItem	&lt;itemInMenu: #(#menu) position: 20.1&gt;	^(MenuItem		labeled: (#Browse1 &lt;&lt; #IDE &gt;&gt; 'Browse &lt;1s&gt;' expandMacrosWith: 'Image'))		enabled: [false];		visible: [false];		yourself</body><body package="GbxDifferencingTools">noImageWarningMenuItem	&lt;itemInMenu: #(#menu) position: 20.1&gt;	^(MenuItem labeled: #NoImageVersionToBrowser &lt;&lt; #IDE &gt;&gt; 'Not in Image')		enabled: [false];		visible: [false];		yourself</body><body package="GbxDifferencingTools">storeExtensionWarningMenuItem	&lt;itemInMenu: #(#menu) position: 40.1&gt;	^(MenuItem		labeled: ((#StoreExtensionOnly &lt;&lt; #IDE &gt;&gt; 'Class Extension Only') asText				emphasizeAllWith: (Array with: #italic)))		enabled: [false];		visible: [false];		yourself</body></methods><methods><class-id>Tools.GbsPackageComparisonHeaderView</class-id> <category>menu</category><body package="GbxDifferencingTools">fileoutAllMenuItem	&lt;itemInMenu: #(#menu) position: 30.3&gt;	^(MenuItem labeled: 'File Out All Differences')		hidden: [true];		"Hidden for now; need to implement GS file out funtionality."		value: [self fileoutAllChangesToGetToMenuTarget];		yourself</body><body package="GbxDifferencingTools">fileoutMenuItem	&lt;itemInMenu: #(#menu) position: 30.2&gt;	^(MenuItem		labeled: (#FileoutDifferencesFrom1s &lt;&lt; #IDE				&gt;&gt; 'File Out Differences from &lt;1s&gt;'					expandMacrosWith: self menuTargetCompliment version))		hidden: [self menuTargetCompliment isNil];		value: [self fileoutChangesToGetToMenuTarget];		yourself</body></methods><methods><class-id>GemStone.Gbs.GbsMethodComparisonView</class-id> <category>menu</category><body package="GbxDifferencingTools">browseGemStoneImplementorsMenuItem	&lt;itemInMenu: #(#menu) position: 10.2&gt;	^(MenuItem labeled: 'Browse Implementors')		value: [self browseGemStoneImplementors: leftMethod selector];		yourself</body><body package="GbxDifferencingTools">browseGemStoneSendersMenuItem	&lt;itemInMenu: #(#menu) position: 10.3&gt;	^(MenuItem labeled: 'Browse Senders')		value: [self browseGemStoneSenders: leftMethod selector];		yourself</body></methods><methods><class-id>Tools.PackageComparisonHeaderView</class-id> <category>menu</category><body package="GbxDifferencingTools">fileoutAllMenuItem	&lt;itemInMenu: #(#menu) position: 30.3&gt;	^(MenuItem labeled: 'File Out All Differences')		value: [self fileoutAllChangesToGetToMenuTarget];		yourself</body></methods><methods><class-id>GemStone.Gbs.GbxBrowser class</class-id> <category>resources</category><body package="GbxDifferencingTools">windowsMenu	"Tools.MenuEditor new openOnClass: self andSelector: #windowsMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Raise GemStone Windows' 				#nameKey: #raiseGemStoneWindows 				#value: #raiseGemStoneWindows ) 			#(#{UI.MenuItem} 				#rawLabel: 'Collapse GemStone Windows' 				#nameKey: #collapseGemStoneWindows 				#value: #collapseGemStoneWindows ) 			#(#{UI.MenuItem} 				#rawLabel: 'Refresh from GS Server' 				#nameKey: #update 				#value: #update ) 			#(#{UI.MenuItem} 				#rawLabel: 'Differencing Tools' 				#nameKey: #openDifferencingTools 				#value: #openDifferencingTools ) ) #(2 1 1) nil ) decodeAsLiteralArray</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>PackageComparisonTool</name><environment>Tools</environment><super>UI.Panel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Store-Code Comparison</package></attributes></class><class><name>ScrolledComparisonShell</name><environment>Tools</environment><super>UI.Panel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>comparisonSource expansionMemory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Store-Code Comparison</package></attributes></class><class><name>ClassBlueprintComparisonView</name><environment>Tools</environment><super>Tools.NamespaceBlueprintComparisonView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rightMethods leftMethods </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Store-Code Comparison</package></attributes></class><class><name>MethodComparisonView</name><environment>Tools</environment><super>Tools.AbstractComparisonRollupView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>leftMethod rightMethod </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Store-Code Comparison</package></attributes></class><class><name>CodeComponent</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Code Components</category><attributes><package>System-Code Components</package></attributes></class><class><name>SingleMethodView</name><environment>Tools</environment><super>Tools.AbstractComparisonRollupView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method isAddition parseTree </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Store-Code Comparison</package></attributes></class><class><name>CodeComponentComparison</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>leftCodeComponents rightCodeComponents removedSharedVariables addedSharedVariables removedNamespaces addedNamespaces removedClasses addedClasses removedMethods addedMethods removedPackageProperties addedPackageProperties addedBundleProperties removedBundleProperties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Store-Code Comparison</package></attributes></class><class><name>PackageComparisonHeaderView</name><environment>Tools</environment><super>UI.Panel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>expandedFraction filteredComponents menuTarget comparison </inst-vars><class-inst-vars></class-inst-vars><imports>			private Store.*			</imports><category></category><attributes><package>Store-Code Comparison</package></attributes></class><class><name>ClassBlueprint</name><environment>Tools</environment><super>Tools.NamespaceBlueprint</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclassReference attributes behaviorType instanceVariables classInstanceVariables </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Blueprints</package></attributes></class></st-source>