Class {
	#name : 'RwDiskRepositoryGenerator',
	#superclass : 'Object',
	#instVars : [
		'gs_options',
		'gs_constraints'
	],
	#category : 'Rowan-Tests'
}

{ #category : 'generating' }
RwDiskRepositoryGenerator class >> generate: aRwLoadSpecification [
  ^ self new
    generate: aRwLoadSpecification;
    yourself
]

{ #category : 'generating' }
RwDiskRepositoryGenerator class >> generateForUrl: specNameOrUrl [
  ^ self new
    generateForUrl: specNameOrUrl;
    yourself
]

{ #category : 'definitions' }
RwDiskRepositoryGenerator >> classExtensionMethodDefinitionsForClass: className inPackage: packageName [

	^ self
		methodDefsFromSpec:
			{{#'testClassExtensionMethod1'.
			('*' , packageName).
			'testClassExtensionMethod1 ^ ClassinstVar2'}}
]

{ #category : 'definitions' }
RwDiskRepositoryGenerator >> classMethodsForClass: className [

	^ self
		methodDefsFromSpec:
			{{#'testClassMethod1'.
			'accessing'.
			'testClassMethod1 ^ ClassVar1'}.
			{#'testClassMethod2'.
			'accessing'.
			'testClassMethod2 ^ true'}}
]

{ #category : 'generator' }
RwDiskRepositoryGenerator >> generate: myLoadSpecification [

	| myPackageSet |
	myLoadSpecification repositoryUrl
		ifNil: [ 
			| url |
			url := myLoadSpecification projectUrl asRwUrl.
			url scheme = 'file'
				ifFalse: [ 
					self
						error:
							'if ' , myLoadSpecification specName printString
								,
									' has not been attached to a cloned repository (repositoryUrl nonNil), then the projectUrl must be a file: url: '
								, url printString ] ].
	myPackageSet := self generatePackageSet.
	Rowan projectTools write
		writePackageSet: myPackageSet
		specification: myLoadSpecification
]

{ #category : 'generator' }
RwDiskRepositoryGenerator >> generateForUrl: specNameOrUrl [

	| url |
	url := specNameOrUrl asRwUrl.
	url scheme = 'file'
		ifFalse: [ 
			self
				error:
					'Must use a file: url for spec, since generator will write to the disk repository' ].
	^ self generate: (RwSpecification fromUrl: url)
]

{ #category : 'generator' }
RwDiskRepositoryGenerator >> generatePackageSet [

	| packageName1 packageName2 packageNames myPackageSet className1 className2 classDefinitionsDictionary1 classDefinitionsDictionary2 classExtensionDefinitionsDictionary2 |
	packageName1 := 'CombinedTestPackage1'.
	packageName2 := 'CombinedTestPackage2'.
	className1 := 'TestClass1'.
	className2 := 'TestClass2'.
	packageNames := {packageName1.
	packageName2}.
	classDefinitionsDictionary1 := Dictionary new
		at: className1
			put:
				((RwClassDefinition
						newForClassNamed: className1
						super: 'Object'
						instvars: #('instVar1')
						classinstvars: #('classInstVar1' 'classInstVar2')
						classvars: #('ClassVar1')
						category: packageName1
						comment:
							'I am a class generated by Rowan tests. My name is ' , className1
								, ', what''s yours?'
						pools: #()
						type: 'normal')
						instanceMethodDefinitions: (self instanceMethodsForClass: className1);
						classMethodDefinitions: (self classMethodsForClass: className1);
						gs_options: self gs_options;
						gs_constraints: self gs_constraints;
						yourself);
		yourself.
	classDefinitionsDictionary2 := Dictionary new
		at: className2
			put:
				((RwClassDefinition
						newForClassNamed: className2
						super: 'Object'
						instvars: #('instVar1')
						classinstvars: #('classInstVar1' 'classInstVar2')
						classvars: #('ClassVar1')
						category: packageName2
						comment:
							'I am a class generated by Rowan tests. My name is ' , className2
								, ', what''s yours?'
						pools: #()
						type: 'normal')
						instanceMethodDefinitions: (self instanceMethodsForClass: className2);
						classMethodDefinitions: (self classMethodsForClass: className2);
						yourself);
		yourself.
	classExtensionDefinitionsDictionary2 := Dictionary new
		at: className1
			put:
				((RwClassExtensionDefinition newForClassNamed: className1)
						classMethodDefinitions:
								(self
										classExtensionMethodDefinitionsForClass: className1
										inPackage: packageName2);
						instanceMethodDefinitions:
								(self
										instanceExtensionMethodDefinitionsForClass: className1
										inPackage: packageName2);
						yourself);
		yourself.
	myPackageSet := RwPackageSetDefinition new
		addPackage:
				(RwPackageDefinition
						withProperties: (Dictionary with: 'name' -> packageName1)
						classDefinitions: classDefinitionsDictionary1
						classExtensions: Dictionary new);
		addPackage:
				(RwPackageDefinition
						withProperties: (Dictionary with: 'name' -> packageName2)
						classDefinitions: classDefinitionsDictionary2
						classExtensions: classExtensionDefinitionsDictionary2);
		yourself.
	^ myPackageSet

]

{ #category : 'accessing' }
RwDiskRepositoryGenerator >> gs_constraints [

	^gs_constraints ifNil: [ #() ]

]

{ #category : 'accessing' }
RwDiskRepositoryGenerator >> gs_constraints: constraintsArray [

	gs_constraints := constraintsArray

]

{ #category : 'accessing' }
RwDiskRepositoryGenerator >> gs_options [

	^gs_options ifNil: [ #() ]

]

{ #category : 'accessing' }
RwDiskRepositoryGenerator >> gs_options: optionsArray [

	gs_options := optionsArray

]

{ #category : 'definitions' }
RwDiskRepositoryGenerator >> instanceExtensionMethodDefinitionsForClass: className inPackage: packageName [

	^ self
		methodDefsFromSpec:
			{{#'testInstanceExtensionMethod1'.
			('*' , packageName).
			'testInstanceExtensionMethod1 ^ instVar1'}}
]

{ #category : 'definitions' }
RwDiskRepositoryGenerator >> instanceMethodsForClass: className [

	^ self
		methodDefsFromSpec:
			{{#'testInstanceMethod1'.
			'accessing'.
			'testInstanceMethod1 ^ instVar1'}.
			{#'testInstanceMethod2'.
			'accessing'.
			'testInstanceMethod2 ^ classInstVar1'}}
]

{ #category : 'definitions' }
RwDiskRepositoryGenerator >> methodDefsFromSpec: specArray [
  | dict |
  dict := Dictionary new.
  specArray
    do: [ :spec | 
      | selector protocol source |
      selector := (spec at: 1) asSymbol.
      protocol := (spec at: 2) asString.
      source := (spec at: 3) asString.
      dict
        at: selector
        put:
          (RwMethodDefinition
            withProperties:
              (Dictionary with: 'selector' -> selector with: 'protocol' -> protocol)
            source: source) ].
  ^ dict
]
